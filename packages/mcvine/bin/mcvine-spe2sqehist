#!/usr/bin/env python

"""
convert "spe" text file generated by Dave mslice program
to I(Q,E) histogram
"""

from pyparsing import *
EOL = LineEnd().suppress()
comment = LineStart() + Literal('###').suppress() + SkipTo(LineEnd()) + EOL

point = Literal( '.' )
colon = Literal( ',' )
e = CaselessLiteral( 'E' ) # cause wrong detection for functions starting with e!
plusorminus = Literal( '+' ) | Literal( '-' )
number = Word( nums )
integer = Combine( Optional( plusorminus ) + number )
floatnumber = Combine( 
    integer +
    Optional( point + Optional( number ) ) +
    Optional( e + integer )
    )
white = White().suppress()
data_line = floatnumber * 8 + SkipTo(LineEnd()).suppress() + EOL
partial_data_line = OneOrMore(floatnumber) + SkipTo(LineEnd()).suppress() + EOL
data_block = comment + OneOrMore(data_line) + Optional(partial_data_line)
line1 = integer + integer + SkipTo(LineEnd()).suppress() + EOL
parser = line1 + OneOrMore(data_block)


def test_basic():
    print comment.parseString('###abc\n')
    print integer.parseString('33')
    print floatnumber.parseString('33.5')
    print floatnumber.parseString('3.5e20')
    print floatnumber.parseString('-3.5E+20')
    print data_line.parseString('0 1 2 3 4 5 6 7\n')
    print OneOrMore(comment).parseString('###\n###\n')
    print OneOrMore(data_line).parseString('0 1 2 3 4 5 6 7\n'*3)
    print data_block.parseString('###\n' + '0 1 2 3 4 5 6 7\n'*3)
    print line1.parseString(' 3 5\n')
    print parser.parseString(' 3 5\n'+'### comment\n' + '0 1 2 3 4 5 6 7\n'*3)
    b = '###comment\n' + '\t0 1 2 3 4 5 6 7\n'*3
    print parser.parseString(' 3 5\n'+b*5)
    return


def load(input):
    print '* parsing ...'
    r = parser.parseFile(input)
    print '  done.'
    print '* now preparing data ...'
    nQ, nE = map(int, r[:2])
    Qcomment = r[2]
    Q = map(float, r[3: 3+nQ])
    index = 3+nQ
    index += 1 # extra 0.000 ?
    Ecomment = r[index]; index+=1
    E = map(float, r[index: index+nE]); index+=nE
    index += 1 # extra 0.000 ?
    intensities = []; errors = []
    for iQ in range(nQ):
        assert r[index].startswith('Intensity'); index+=1
        intline = map(float, r[index: index+nE]); index+=nE
        intensities.append(intline)

        assert r[index].startswith('Errors'); index+=1
        errline = map(float, r[index: index+nE]); index+=nE
        errors.append(errline)
        
        continue
    import numpy as np
    print '  done.'
    return np.array(Q), np.array(E), np.array(intensities), np.array(errors)


def run(input, output):
    Q, E, I, E2 = load(input)
    import histogram as H, histogram.hdf as hh
    axes = [
        ('Q', Q, 'angstrom**-1'),
        ('E', E, 'meV'),
        ]
    h = H.histogram('I(Q,E)', axes, I, E2) 
    print '* writing histogram'
    hh.dump(h, output)
    print '  done.'
    return


def main():
    # test_basic()
    import sys
    input, output = sys.argv[1:3]
    run(input, output)
    return


if __name__ == '__main__': main()
