#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from pyre.applications.Script import Script

class App(Script):

    class Inventory(Script.Inventory):

        import pyre.inventory
        
        inputfilename = pyre.inventory.str('input')


    def __init__(self, name='mcvine-convert-mcstas-instrument'):
        super(App, self).__init__(name)
        return

    
    def main(self):
        input = self.inventory.inputfilename
        text = open(input).read()
        from mcstas2.utils.parsers.McStasInstrumentParser import McStasInstrumentParser
        parser = McStasInstrumentParser()
        instrument = parser.parse(text)
        
        fname = os.path.basename(input)
        instrname, ext = os.path.splitext(fname)

        instrument.name = instrname

        try:
            self._render(instrument)
        except:
            import traceback
            traceback.print_exc()
            print
            self._onError()
        return

    
    def _onError(self):
        print '*'*70
        print 'This conversion script is still experimental'
        print 'Please check'
        print ' * If component parameters (including position and rotation parameters)'
        print '   contain references to c variables.'
        return


    def _render(self, instrument):
        self._createInstrumentScript(instrument)
        self._createPml(instrument)
        return


    def _createInstrumentScript(self, instrument):
        complist = ','.join([c.name for c in instrument.components])
        d = {
            'name': instrument.name,
            'components': complist,
            }
        cmd = 'mcvine-create-instrument-simulation-application -name=%(name)s -components=%(components)s' % d
        cmd += '> /dev/null'
        if os.system(cmd):
            raise RuntimeError, "%s failed"  % cmd
        print '* generated mcvine app "%s"' % instrument.name


    def _createPml(self, instrument):
        out = '%s.pml' % instrument.name
        if os.path.exists(out):
            os.remove(out)
            
        cmd = ['./%s' % instrument.name]
        for c in instrument.components:
            cmd.append('-%s=%s' % (c.name, c.type))
            for k,v in c.parameters.iteritems():
                cmd.append('-%s.%s="%s"' % (c.name, k,v))
                continue
            continue
        cmd.append('-h')
        cmd.append('-dump-pml=yes')
        cmd = ' '.join(cmd)
        cmd += '> /dev/null'
        if os.system(cmd):
            raise RuntimeError, "%s failed"  % cmd
        print '* generated configuration "%s"' % out

    pass

import os


def main(): 
    app = App()
    app.run()
    return


if __name__ == '__main__': main()


# version
__id__ = "$Id: mcvine-list-components 601 2010-10-03 19:55:29Z linjiao $"

# End of file 
