#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2013  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from pyre.applications.Script import Script

class App(Script):

    class Inventory(Script.Inventory):

        import pyre.inventory
        
        inputfilename = pyre.inventory.str('input')


    def __init__(self, name='mcvine-convert-mcstas-instrument'):
        super(App, self).__init__(name)
        return

    
    def main(self):
        input = self.inventory.inputfilename
        text = open(input).read()
        from mcstas2.utils.parsers.McStasInstrumentParser import McStasInstrumentParser
        parser = McStasInstrumentParser()
        instrument = parser.parse(text)
        
        fname = os.path.basename(input)
        instrname, ext = os.path.splitext(fname)

        instrument.name = instrname
        try:
            self._render(instrument)
        except:
            import traceback
            traceback.print_exc()
            print
            self._onError()
        return

    
    def _onError(self):
        print '*'*70
        print 'This conversion script is still experimental'
        print 'Please check'
        print ' * If component parameters (including position and rotation parameters)'
        print '   contain references to c variables.'
        return


    def _render(self, instrument):
        self._dumpAsJsonStr(instrument)
        self._createInstrumentScript(instrument)
        self._createInstrumentConfigurator(instrument)
        return

    
    def _dumpAsJsonStr(self, instrument):
        def comp2dict(comp):
            return dict(
                type = comp.type,
                name = comp.name,
                parameters = comp.parameters,
                position = comp.position,
                orientation = comp.orientation,
                )
        def instr2dict(inst):
            return [comp2dict(c) for c in inst.components]
        data = instr2dict(instrument)
        import json
        out = '%s.json' % instrument.name
        json.dump(data, open(out, 'wt'))
        print '* generated instrument description in "%s"' % out
        return

    
    def _createInstrumentConfigurator(self, instrument):
        # render
        text = InstrumentConfiguratorRenderer().render(instrument)
        text = '\n'.join(text)
        # write out
        out = 'config-%s' % instrument.name
        open(out, 'w').write(text)
        # make executable
        import os, stat
        path = os.path.abspath(out); os.chmod(path, stat.S_IRWXU)
        # done
        print '* generated instrument configurator "%s"' % out
        return


    def _createInstrumentScript(self, instrument):
        complist = ','.join([c.name for c in instrument.components])
        d = {
            'name': instrument.name,
            'components': complist,
            }
        cmd = 'mcvine-create-instrument-simulation-application -name=%(name)s -components=%(components)s' % d
        cmd += '> /dev/null'
        if os.system(cmd):
            raise RuntimeError, "%s failed"  % cmd
        print '* generated mcvine app "%s"' % instrument.name


    def _createPml(self, instrument):
        # obsolete
        # this is not the best way to create pml
        # plan: create the application code
        out = '%s.pml' % instrument.name
        if os.path.exists(out):
            os.remove(out)
        
        text = PmlRenderer().render(instrument)
        text = '\n'.join(text)
        open(out, 'w').write(text)
        print '* generated configuration "%s"' % out
        return

    pass


class InstrumentConfiguratorRenderer(object):

    def render(self, instrument):
        self._reps = []
        self._indlevel = 0
        self._indstr = '  '
        self._write('#!/usr/bin/env python')
        self._write('')
        self._write('# %s' % instrument.name)
        self._write('')
        self.onInstrument(instrument)
        self._write('')
        self._write('def main():')
        self._indent()
        self._write('config()')
        self._outdent()
        self._write("if __name__=='__main__': main()")
        return self._reps
    

    def onInstrument(self, instrument):
        for comp in instrument.components:
            self.onComponent(comp)
            continue
        w = self._write
        w('def config(%s):' % instrument.parameters)
        self._indent()
        for l in instrument.init.splitlines():
            w(l)
            continue
        w(
            'components = [%s()]' % ', '.join(
                [c.name for c in instrument.components])
            )
        w('from mcvine.instrument.pml import set_instrument_parameters, PmlRenderer')
        w('class instrument: pass')
        w('instrument.name=%r' % instrument.name)
        w('instrument.components=components')
        w('set_instrument_parameters(instrument, locals())')
        w('from mcvine.instrument.pml import PmlRenderer')
        w('renderer = PmlRenderer()')
        w("text = '\\n'.join(renderer.render(instrument))")
        w("pml = '%s.pml'" % instrument.name)
        w("open(pml, 'wt').write(text)")
        w('return')
        self._outdent()
        return


    def onComponent(self, component):
        self._write('class %s(object):' % component.name)
        self._indent()
        for k,v in component.__dict__.iteritems():
            if k.startswith('_'): continue
            self._property(k,v)
            continue
        self._outdent()
        self._write('')
        return

    
    def _property(self, k, v):
        self._write('%s=%r' % (k,v))
        return

    
    def _write(self, text):
        t = self._indlevel * self._indstr + text
        self._reps.append(t)
        return


    def _indent(self): self._indlevel += 1
    def _outdent(self): self._indlevel -= 1


from mcvine.instrument.pml import PmlRenderer

import os


def main(): 
    app = App()
    app.run()
    return


if __name__ == '__main__': main()


# version
__id__ = "$Id: mcvine-list-components 601 2010-10-03 19:55:29Z linjiao $"

# End of file 
