// -*- C++ -*-
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//                                   Jiao Lin
//                      California Institute of Technology
//                      (C) 2007-2014  All Rights Reserved
//
// {LicenseText}
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//

#ifndef NNGRIDDATA_3D_H
#error NNGridData_3D.icc not meaningful outside NNGridData_3D.h 
#else


#include <sstream>
#include <cmath>
#include <vector>

namespace NNGridData_3D_impl{

  // given x and axis, calculate (x-axis.start)/axis.step and break the result
  // to an integer and a remainder
  template< typename Float, typename N >
  void value2index_and_remainder
  ( const Float & value, 
    DANSE::phonon::LinearlyInterpolatableAxis<Float, N> axis,
    N &index, Float & remainder )
  {
    Float r = (value-axis.start)/axis.step;
    if ( r<0 || r >= axis.n ) {
      if (std::abs(r) < 1e-7) r = 0;
      else {
      std::ostringstream oss;
      oss << "value " << value << " is out of bound: ("
	  << axis.start << ", " << axis.start + axis.n * axis.step 
	  << ")" ;
      throw DANSE::phonon::Exception( oss.str() );
      }
    }
    
    index = std::floor( r );
    
    remainder = r - index;
  }

  template< typename Array_3D, typename Index, typename Float>
  inline Float getitem( const Array_3D & array, Index x, Index y, Index z)
  {
    static std::vector<Index> indexes(3);
    indexes[0] = x; indexes[1] = y; indexes[2] = z;
    return array[ indexes ];
  }
}


template < typename Array_3D, typename FloatType,
	   typename Size>
DANSE::phonon::NNGridData_3D<Array_3D, FloatType, Size> ::NNGridData_3D
( const axis_t & x, const axis_t & y, const axis_t & z,
  const dataarray_t & dataarray )
  : m_xaxis(x), m_yaxis(y), m_zaxis(z),
    m_dataarray(dataarray)
{
  try {
    std::vector<Size> indexes(3);
    indexes[0] = x.n;
    indexes[1] = y.n;
    indexes[2] = z.n;
    m_dataarray[ indexes ];
  }
  catch (...) {
    std::ostringstream oss;
    oss << "NNGridData_3D ctor: "
	<< "shape mismatch between axes and data array."
	<< "axes: " << x.n << ", " << y.n << ", " << z.n << ", "
	<< "dataarray: ";
    for (unsigned int i=0; i<3; i++)
      oss << m_dataarray.shape()[i] << "," ;

    throw Exception( oss.str() );
  }
}



#include "interpolate.h"

template < typename Array_3D, typename FloatType,
	   typename Size>
FloatType
DANSE::phonon::NNGridData_3D<Array_3D, FloatType, Size>::operator ()
  ( const FloatType & x, const FloatType & y, const FloatType & z ) const
{

  using namespace NNGridData_3D_impl;

  Size nx, ny, nz;
  FloatType rx, ry, rz;

  value2index_and_remainder(x, m_xaxis, nx, rx);
  value2index_and_remainder(y, m_yaxis, ny, ry);
  value2index_and_remainder(z, m_zaxis, nz, rz);
  /*
  std::cout << "x,y,z=" << x << ", " << y << ", " << z 
	    << "nx,rx=" << nx << ", " << rx
	    << "ny,ry=" << ny << ", " << ry
	    << "nz,rz=" << nz << ", " << rz
	    << std::endl;
  */
  return getitem<dataarray_t, index_t, FloatType>
    (m_dataarray, nx+(rx>0.5?1:0), ny+(ry>0.5?1:0), nz+(rz>0.5?1:0));
}

#endif

// version
// $Id$

// End of file 
