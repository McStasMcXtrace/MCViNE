// -*- C++ -*-
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//                                   Jiao Lin
//                      California Institute of Technology
//                        (C) 2008 All Rights Reserved  
//
// {LicenseText}
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//



#ifndef PHONON_SCATTERINGLENGTH_H
#error scattering_length.icc not meaningful outside scattering_length.h
#else

#include <iostream>


template <typename complex_t, typename K_t, typename epsilon_t,
	  typename atom_t, typename atoms_t,
	  typename dispersion_t>
 complex_t
 mccomponents::kernels::phonon::sum_of_scattering_length
 ( const K_t & Q, 
   int branch,
   const atoms_t & atoms, 
   const dispersion_t & dispersion )
{
  static const complex_t cI(0,1);

  complex_t ret = 0;
  
#ifdef DEEPDEBUG
  std::cout << "in scattering_length.icc" << std::endl;
#endif
  
  for ( size_t i=0; i<atoms.size(); i++){
    // (eps.Q)
    epsilon_t eps = dispersion.polarization(branch, i, Q);
    complex_t qdote = (Q|eps);
    
    const atom_t & atom = atoms[i];
    
    complex_t qdotd = (Q|atom.position);
    // atom.coherent_scattering_length: fm
    // atom.mass: atomic mass unit
    // Q: inverse angstrom
    // atom.position: angstrom
    // eps: normalized
    // NOTE: no need to have 2M. it is handled in conversion of 
    //       adjusted Q to energy
    complex_t c1 = atom.coherent_scattering_length/std::sqrt(atom.mass) \
      * std::exp( cI * qdotd ) * qdote;
    ret += c1;
#ifdef DEEPDEBUG
    std::cout
      << i 
      << ": sctt len=" << atom.coherent_scattering_length << ", "
      << "mass=" << atom.mass << ", "
      << "Q=" << Q << ", "
      << "position=" << atom.position << ", "
      << "eps=" << eps << ", "
      << "exp(cI*qdotd)=" << std::exp(cI*qdotd) << ", "
      << "qdote=" << qdote << ", "
      << "one atom term=" << c1 << ", "
      << std::endl;
#endif
  }

  return ret;
}

#endif


// version
// $Id$

// End of file 

