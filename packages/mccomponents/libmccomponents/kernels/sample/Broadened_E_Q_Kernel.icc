// -*- C++ -*-
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//                                   Jiao Lin
//                      California Institute of Technology
//                      (C) 2006-2010  All Rights Reserved
//
// {LicenseText}
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//



#ifndef MCCOMPONENTS_KERNELS_BROADENED_E_Q_KERNEL_H
#error Broadened_E_Q_Kernel.icc not meaningful outside Broadened_E_Q_Kernel.h
#endif

#include <cmath>
#include <algorithm>
#include "mccomponents/exception.h"
#include "mcni/math/number.h"
#include "mccomponents/math/random.h"
#include "mccomponents/math/random/gaussian.h"
#include "mccomponents/math/random/geometry.h"
#include "E_Q_Kernel_helpers.h"
#include "mccomponents/math/rootfinding.h"


#ifdef DEBUG
#include "journal/debug.h"
#endif


template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
struct 
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
:: Details {

#ifdef DEBUG
  const static char jrnltag[];
  journal::debug_t debug;
#endif
  Details() 
    :
    root_finder(1e-6)
    ,roots_finder(root_finder, 10000)
#ifdef DEBUG
    ,debug( jrnltag ) {}
#endif
  {}
  
  // components
  math::Algorithms::Bracketing::Ridder::ZRidd root_finder;
  math::FindRootsEvenly roots_finder;
  
  // data
  const static double m_epsilon;
};


#ifdef DEBUG
template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
const char 
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
::Details::jrnltag[] = "Broadened_E_Q_Kernel";
#endif

template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
const double mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t> \
::Details::m_epsilon = 1e-4;


template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
::Broadened_E_Q_Kernel
(const E_Q_functor_t & E_Q, 
 const S_Q_functor_t & S_Q,
 const Sigma_Q_functor_t & sigma_Q,
 double Qmin, double Qmax,
 double absorption_coefficient,
 double scattering_coefficient)
  : m_E(E_Q),
    m_S(S_Q),
    m_sigma(sigma_Q),
    m_Qmin(Qmin),
    m_Qmax(Qmax),
    m_absorption_coefficient( absorption_coefficient ),
    m_scattering_coefficient( scattering_coefficient ),
    m_details( new Details )
{
  if (m_Qmin<0) {
    std::cerr << "Qmin must be not negative. Got " << m_Qmin << std::endl;
    throw;
  }
  if (m_Qmin >= m_Qmax) {
    std::cerr << "Qmin (" << m_Qmin 
	      << ") must be smaller than Qmax ("
	      << m_Qmax << ")." << std::endl;
    throw;
  }
  // compute Emin and Emax
  // this assumes that the E(Q) curve is smooth and does not have spikes
  const size_t N = 100; // # of data points
  double Emin[N], Emax[N], dQ = (Qmax-Qmin)/N;
  for (size_t i=0; i<N; i++) {
    double Q = m_Qmin + dQ * i;
    Emin[i] = m_E(Q) - m_sigma(Q)*3;
    Emax[i] = m_E(Q) + m_sigma(Q)*3;
  }
  std::sort(Emin, Emin+N); std::sort(Emax, Emax+N);
  m_Emin = Emin[0]; m_Emax = Emax[N-1];
}


template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
double
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
::absorption_coefficient(const mcni::Neutron::Event & ev )
{
  // this is a simplified model
  return m_absorption_coefficient;
}


template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
double
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
::scattering_coefficient(const mcni::Neutron::Event & ev )
{

  // this is a simplified model
  return m_scattering_coefficient;
}


template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
void
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
::absorb
( mcni::Neutron::Event & ev )
{
}


template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
void
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
::scatter
( mcni::Neutron::Event & ev )
{
  namespace conversion = mcni::neutron_units_conversion;

  // input neutron state
  mcni::Neutron::State & state = ev.state;
  // incident neutron velocity
  double vi = state.velocity.length();
  // incident neutron energy
  double Ei = conversion::v2E( vi );
  // XXX: if Ei is too small no scattering
  if (Ei<m_Emin) return;
  
  // pick Q and E
  size_t count = 0; double E = Ei+1, Q;
  while (count++ < 100 && E>=Ei) {
    // randomly pick momentum transfer
    Q = math::random(m_Qmin, m_Qmax);
  
    // randomly pick energy deviation following gaussian(normal) distribution
    double dE = mccomponents::math::normal_distrib_rand() * m_sigma(Q);
  
    // compute E from Q and deviation
    E = m_E(Q) + dE;
  }
  
  // final energy
  double Ef = Ei-E;
  
  // final velocity magnitude
  double vf = conversion::E2v( Ef );
  
  // theta, phi
  double ki = conversion::v2k* vi;
  double kf = conversion::v2k* vf;
  double cost = (ki*ki+kf*kf-Q*Q)/(2*ki*kf);
  double cost2 = cost*cost;
  if (cost2>1) {
    // Ei is too small and we have a problem
    // no scattering
    std::cerr << "Broadened_E_Q_Kernel::scatter: should not reach here" << std::endl;
    return;
  }
  double sint = std::sqrt(1-cost2);
  // 
  double phi = math::random(0., mcni::PI*2);
  
  // scattered neutron velocity vector
  typedef mcni::Vector3<double> V3d;
  V3d e1 = state.velocity; e1.normalize();
  // if e1 is not in z-direction
  // we set e2 to be the cross product of e1 and (0,0,1)
  // if e1 is right on the z-direction, that means e1 = (0,0,1)
  // and we set e2 = (1,0,0) or whatever
  V3d e2;
  if (std::abs(e1.x)>m_details->m_epsilon || std::abs(e1.y)>m_details->m_epsilon) { 
    e2 = V3d(0,0,1) * e1; e2.normalize();
  } else {
    e2 = V3d(1,0,0);
  }
  V3d e3 = e1 * e2;
  // == v_f ==
  V3d v_f = sint*cos(phi) * e2 
    + sint*sin(phi) * e3
    + cost * e1; // direction
  v_f = v_f * vf; // with right magnitude
  
  // adjust probability of neutron event
  ev.probability *= m_S(Q) * (vf/vi);
  // we need to divide by 4pi (we are calculating integrated sigma, which is \int (vf/vi)*S/(4pi)
  ev.probability /= 4 * mcni::PI;
  // additional factor from integration over Q instead of solid angle
  // see above
  // XXX: this is not entirely correct since we are not adjusting m_Qmax and m_Qmin
  // XXX: according to Ei. 
  ev.probability *=  Q*(m_Qmax-m_Qmin) / (kf*ki) * 2*mcni::PI; 
  
  state.velocity = v_f;
}


// version
// $Id: Broadened_E_Q_Kernel.cc 601 2010-10-03 19:55:29Z linjiao $

// End of file 
