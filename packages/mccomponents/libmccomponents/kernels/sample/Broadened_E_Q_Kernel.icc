// -*- C++ -*-
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//                                   Jiao Lin
//                      California Institute of Technology
//                      (C) 2006-2010  All Rights Reserved
//
// {LicenseText}
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//



#ifndef MCCOMPONENTS_KERNELS_BROADENED_E_Q_KERNEL_H
#error Broadened_E_Q_Kernel.icc not meaningful outside Broadened_E_Q_Kernel.h
#endif

#include <cmath>
#include "mccomponents/exception.h"
#include "mcni/math/number.h"
#include "mccomponents/math/random.h"
#include "mccomponents/math/random/gaussian.h"
#include "mccomponents/math/random/geometry.h"
#include "E_Q_Kernel_helpers.h"
#include "mccomponents/math/rootfinding.h"


#ifdef DEBUG
#include "journal/debug.h"
#endif


template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
struct 
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
:: Details {

#ifdef DEBUG
  const static char jrnltag[];
  journal::debug_t debug;
#endif
  Details() 
    :
    root_finder(1e-6)
    ,roots_finder(root_finder, 10000)
#ifdef DEBUG
    ,debug( jrnltag ) {}
#endif
  {}
  
  // components
  math::Algorithms::Bracketing::Ridder::ZRidd root_finder;
  math::FindRootsEvenly roots_finder;
};


#ifdef DEBUG
template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
const char 
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
::Details::jrnltag[] = "Broadened_E_Q_Kernel";
#endif


template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
::Broadened_E_Q_Kernel
(const E_Q_functor_t & E_Q, 
 const S_Q_functor_t & S_Q,
 const Sigma_Q_functor_t & sigma_Q,
 double Qmin, double Qmax,
 double absorption_coefficient,
 double scattering_coefficient)
  : m_E(E_Q),
    m_S(S_Q),
    m_sigma(sigma_Q),
    m_Qmin(Qmin),
    m_Qmax(Qmax),
    m_absorption_coefficient( absorption_coefficient ),
    m_scattering_coefficient( scattering_coefficient ),
    m_details( new Details )
{
  if (m_Qmin<0) {
    std::cerr << "Qmin must be not negative. Got " << m_Qmin << std::endl;
    throw;
  }
  if (m_Qmin >= m_Qmax) {
    std::cerr << "Qmin (" << m_Qmin 
	      << ") must be smaller than Qmax ("
	      << m_Qmax << ")." << std::endl;
    throw;
  }
  // compute Emin and Emax
  // this assumes that the E(Q) curve is smooth and does not have spikes
  const size_t N = 100; // # of data points
  double Emin[N], Emax[N], dQ = (Qmax-Qmin)/N;
  for (size_t i=0; i<N; i++) {
    double Q = m_Qmin + dQ * i;
    Emin[i] = m_E(Q) - m_sigma(Q)*3;
    Emax[i] = m_E(Q) + m_sigma(Q)*3;
  }
  std::sort(Emin, Emin+N); std::sort(Emax, Emax+N);
  m_Emin = Emin[0]; m_Emax = Emax[N-1];
}


template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
double
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
::absorption_coefficient(const mcni::Neutron::Event & ev )
{
  // this is a simplified model
  return m_absorption_coefficient;
}


template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
double
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
::scattering_coefficient(const mcni::Neutron::Event & ev )
{

  // this is a simplified model
  return m_scattering_coefficient;
}


template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
void
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
::absorb
( mcni::Neutron::Event & ev )
{
}


template< typename E_Q_functor_t, typename S_Q_functor_t, typename Sigma_Q_functor_t>
void
mccomponents::kernels::Broadened_E_Q_Kernel<E_Q_functor_t, S_Q_functor_t, Sigma_Q_functor_t>\
::scatter
( mcni::Neutron::Event & ev )
{
  namespace conversion = mcni::neutron_units_conversion;

  // input neutron state
  mcni::Neutron::State & state = ev.state;
  // incident neutron velocity
  double vi = state.velocity.length();
  // incident neutron energy
  double Ei = conversion::v2E( vi );
  
  // randomly pick scattering direction
  typedef mcni::Vector3<double> V3d;
  
  // find Ef
  size_t nq = 0, count = 0, index=-1;
  double Q; V3d dir;
  while (!nq && count++<100) {
    // randomly choose a direction
    math::choose_direction( dir );
    // compute cos(theta)
    V3d ei = state.velocity; ei.normalize();
    double cos_t = (ei|dir);
    // construct functor to find solution
    E_q_minus_deltaE<E_Q_functor_t> eqmd(m_E, cos_t, Ei);
    // solve 
    std::vector<double> _Q_list = m_details->roots_finder.solve( m_Qmin, m_Qmax, eqmd);
    // hack: the current solver may give fake roots
    size_t _nq = _Q_list.size(); nq=0;
    double Q_list[_nq];
    for (int i=0; i<_nq; i++) {
      if (std::abs(eqmd.evaluate(_Q_list[i])) < 1e-7) {
	Q_list[nq++] = _Q_list[i];
      }
    }
    // .. randomly choose Q
    if (nq>1) index = math::random(size_t(0), nq);
    else if (nq==1) index = 0;
    if (nq) Q = Q_list[index];
  }
  // if cannot find solution in several iterations
  if (nq<1) {
    std::cerr
      << "E_Q_Kernel::scatter: failed to find solution for Q. skip."
      << "Ei=" << Ei
      << std::endl;
    return;
  }
  // .. get E from Q
  double E = m_E(Q);
  // randomly pick energy deviation following gaussian(normal) distribution
  double dE = mccomponents::math::normal_distrib_rand() * m_sigma(Q);
  E += dE;
  // .. final energy
  double Ef = Ei - E;
  
  if (Ef<0) {
    // should not proceed. non-physical
    std::cerr
      << "E_Q_Kernel::scatter: failed to apply broadening"
      << "Ei=" << Ei << ","
      << "E=" << E
      << std::endl;
    return;
  }
  
#ifdef DEBUG
  std::cout << "E,Q=" << E << ", " << Q << std::endl;
#endif
  
  // final velocity magnitude
  double vf = conversion::E2v( Ef );
  
  // final velocity vector
  V3d vfv = dir * vf;
  state.velocity = vfv;
 
#ifdef DEBUG
  std::cout << "S,vf/vi=" << m_S(Q) << ", " << vf/vi << std::endl;
#endif
  // adjust probability of neutron event
  ev.probability *= m_S(Q) * (vf/vi);
}


// version
// $Id: Broadened_E_Q_Kernel.cc 601 2010-10-03 19:55:29Z linjiao $

// End of file 
