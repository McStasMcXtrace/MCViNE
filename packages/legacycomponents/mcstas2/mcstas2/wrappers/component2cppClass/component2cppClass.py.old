#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#              (C) 2005 All Rights Reserved  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from mcstas2.utils.parsers.ComponentParser import component as componentParserFactory

componentParser = componentParserFactory()


def component2cppClass( category, type ):
    import mcstas2.installationInfo as info
    
    comp_filename = info.mcstas_component_file( category, type )
    s = open(comp_filename).read()
    compInfo = componentParser.parseString( s )

    class_name = compInfo.name
    ctor_args = _add_double_type(compInfo.definition_parameters) \
                + _add_double_type(compInfo.setting_parameters)
    output_params = compInfo.output_parameters
    trace_method_args = compInfo.state_parameters
    private_member_declaration = compInfo.declare[1:-1]
    ctor_body = compInfo.initialize
    trace_method_body = compInfo.trace
    dtor_body = compInfo.finalize

##     print class_name
##     for arg in ctor_args: print arg
##     print private_member_declaration
##     print ctor_body
##     print dtor_body

##     print compInfo.header
##     print compInfo.save

    return createCppClass( class_name,
                           ctor_args, ctor_body,
                           dtor_body,
                           private_member_declaration,
                           trace_method_args,
                           trace_method_body )


from mcstas2.utils.mills.cxx.factory import createHHandCC
def component2HHandCC( category, type, pathToSave ):
    return createHHandCC( component2cppClass( category, type ), pathToSave )


from mcstas2.utils.mills.cxx.Class import Argument, Method, Member, Class, argument2Member

def createCppClass( name,
                    ctor_args, ctor_body,
                    dtor_body,
                    private_member_declaration,
                    trace_method_args,
                    trace_method_body ):

    #ctor arguments become private members.
    # E_monitor( int nchan ) --> E_mointor( int in_nchan ) { nchan = in_nchan; }
    #
    private_members = [ argument2Member(arg) for arg in ctor_args ]
    # ctor arguments all will have prefix 'in_'
    ctor_args = [ Argument( arg.type,  "in_%s" % arg.name, arg.default ) for arg in ctor_args ]
    #
    # transfer inputs to private members
    ctor_getInputs = [ "%s = %s" % (member.name, arg.name) for member, arg in \
                       zip( private_members, ctor_args ) ]
    # 
    ctor_body = ctor_body.split("\n")
    ctor_body = ctor_getInputs + ctor_body
    ctor = Method( name, ctor_args, ctor_body )
    
    dtor = Method( '~%s' % name, [], dtor_body.split("\n") )
    
    trace_body = trace_method_body.split('\n')
    trace_arguments = [ Argument( "double &", arg ) for arg in trace_method_args ]
    trace = Method( "trace", trace_arguments, trace_body, type = "void" )
    
    methods = [ctor, dtor, trace]
    
    private = private_member_declaration.split("\n")

    klass = Class( name, public_methods = methods, private = private,
                   private_members = private_members )
    
    return klass



def _add_double_type1( param ):
    "mcstas parameters without type are doubles"
    if param.type == "": return Argument("double", param.name, param.value)
    return Argument( param.type, param.name, param.value )


def _add_double_type( params ):
    if params == "": return []
    return [ _add_double_type1(param) for param in params ]


def test():
    hhfn, ccfn = component2HHandCC( "monitors", "E_monitor", '_test' )
    return

if __name__ == "__main__": test()


# version
__id__ = "$Id$"

# End of file 
