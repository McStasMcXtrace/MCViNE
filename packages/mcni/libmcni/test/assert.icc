#ifndef MCNI_TEST_ASSERT_H
#error assert.icc not meaningful outside assert.h
#else


#include <sstream>


// implementations


template <class Num1, class Num2>
void mcni::assertNumberEqual( Num1 a, Num2 b)
{
  std::ostringstream oss;

  if (a!=b) {
    oss << a << " is not equal to " << b;
    throw AssertionError( oss.str().c_str() );
  }
}


namespace mcni{ namespace Assert {namespace impl_details{

  template <class Type> 
  std::string not_almost_equal_err_msg( const Type & a, const Type & b ) {

    std::ostringstream oss;
    oss << a << " is not almost equal to " << b;
    return oss.str();

  }

}}}


template <class Num1, class Num2>
void mcni::assertNumberAlmostEqual
( Num1 a, Num2 b, double relerr, double abserr)
{
  using std::abs;
  using Assert::impl_details::not_almost_equal_err_msg;
  
  // if both inputs are very close to zero, then we say we are good
  double bigger = std::max( abs(a), abs(b) );
  if (bigger <= abserr) return;

  // otherwise we first find out if the absolute difference meets the criteria
  double absdiff = abs(a-b);
  if (absdiff > abserr) throw AssertionError( not_almost_equal_err_msg( a,b ).c_str() );
  
  // if we reach here, we should check the relative difference
  double reldiff = absdiff/bigger;
  if (reldiff > relerr) throw AssertionError( not_almost_equal_err_msg( a,b ).c_str() );
}


template <class Vector1, class Vector2>
void mcni::assertVectorAlmostEqual( const Vector1 & v1, const Vector2 & v2, double relerr, double abserr )
{
  if (v1.size() != v2.size()) {
    throw AssertionError( "vector has difference sizes" );
  }
  for (int i=0; i<v1.size(); i++) {
    assertNumberAlmostEqual( v1[i], v2[i], relerr, abserr );
  }
}


#endif
