# Generated by McStasConverter, 17 Feb 2011 18:18


from _ import JobBuilder as base
class Builder(base):


    def onArm(self, component):
        kwds = {
            'name': component.componentname,
            'category': 'optics',
            'type': 'Arm',
            'supplier': 'mcstas2',
            }
        self.onNeutronComponent( **kwds )

        opts = {}

        parameters = {
            }
        for k,v in parameters.iteritems():
            opts['%s.%s' % (component.componentname, k)] = v

        self.cmdline_opts.update( opts )


    def onSNSModerator(self, component):
        kwds = {
            'name': component.componentname,
            'category': 'sources',
            'type': 'SNS_source4',
            'supplier': 'mcstas2',
            }
        self.onNeutronComponent( **kwds )

        opts = {}

        parameters = {
            'S_filename': component.S_filename,
            'width': component.width,
            'height': component.height,
            'dist': component.dist,
            'xw': component.xw,
            'yh': component.yh,
            'Emin': component.Emin,
            'Emax': component.Emax,
            'tinmin': component.tinmin,
            'tinmax': component.tinmax,
            'sample_E': component.sample_E,
            'sample_t': component.sample_t,
            'proton_T': component.proton_T,
            }
        for k,v in parameters.iteritems():
            opts['%s.%s' % (component.componentname, k)] = v

        self.cmdline_opts.update( opts )


    def onCollimatorLinear(self, component):
        kwds = {
            'name': component.componentname,
            'category': 'optics',
            'type': 'Collimator_linear',
            'supplier': 'mcstas2',
            }
        self.onNeutronComponent( **kwds )

        opts = {}

        parameters = {
            'xmin': component.x_min,
            'xmax': component.x_max,
            'ymin': component.y_min,
            'ymax': component.y_max,
            'len': component.len,
            'divergence': component.divergence,
            'transmission': component.transmission,
            'divergenceV': component.divergenceV,
            }
        for k,v in parameters.iteritems():
            opts['%s.%s' % (component.componentname, k)] = v

        self.cmdline_opts.update( opts )


    def onSlit(self, component):
        kwds = {
            'name': component.componentname,
            'category': 'optics',
            'type': 'Slit',
            'supplier': 'mcstas2',
            }
        self.onNeutronComponent( **kwds )

        opts = {}

        parameters = {
            'xmin': component.x_min,
            'xmax': component.x_max,
            'ymin': component.y_min,
            'ymax': component.y_max,
            'radius': component.radius,
            'cut': component.cut,
            'width': component.width,
            'height': component.height,
            }
        for k,v in parameters.iteritems():
            opts['%s.%s' % (component.componentname, k)] = v

        self.cmdline_opts.update( opts )


    def onLMonitor(self, component):
        kwds = {
            'name': component.componentname,
            'category': 'monitors',
            'type': 'L_monitor',
            'supplier': 'mcstas2',
            }
        self.onNeutronComponent( **kwds )

        opts = {}

        parameters = {
            'xmin': component.x_min,
            'xmax': component.x_max,
            'ymin': component.y_min,
            'ymax': component.y_max,
            'xwidth': component.xwidth,
            'yheight': component.yheight,
            'Lmin': component.Lmin,
            'Lmax': component.Lmax,
            'nchan': component.nchan,
            'filename': outputfilename(component),
            }
        for k,v in parameters.iteritems():
            opts['%s.%s' % (component.componentname, k)] = v

        self.cmdline_opts.update( opts )


    def onGuide(self, component):
        kwds = {
            'name': component.componentname,
            'category': 'optics',
            'type': 'Guide',
            'supplier': 'mcstas2',
            }
        self.onNeutronComponent( **kwds )

        opts = {}

        parameters = {
            'w1': component.w1,
            'h1': component.h1,
            'w2': component.w2,
            'h2': component.h2,
            'l': component.l,
            'R0': component.R0,
            'Qc': component.Qc,
            'alpha': component.alpha,
            'm': component.m,
            'W': component.W,
            'reflect': component.reflect,
            }
        for k,v in parameters.iteritems():
            opts['%s.%s' % (component.componentname, k)] = v

        self.cmdline_opts.update( opts )


    def onDiskChopper(self, component):
        kwds = {
            'name': component.componentname,
            'category': 'optics',
            'type': 'DiskChopper',
            'supplier': 'mcstas2',
            }
        self.onNeutronComponent( **kwds )

        opts = {}

        parameters = {
            'theta_0': component.theta_0,
            'R': component.R,
            'h': component.h,
            'omega': component.omega,
            'n': component.n,
            'j': component.j,
            'theta_1': component.theta_1,
            't_0': component.t_0,
            'IsFirst': component.IsFirst,
            'n_pulse': component.n_pulse,
            'abs_out': component.abs_out,
            'phi_0': component.phi_0,
            'w': component.w,
            'wc': component.wc,
            'compat': component.compat,
            }
        for k,v in parameters.iteritems():
            opts['%s.%s' % (component.componentname, k)] = v

        self.cmdline_opts.update( opts )


    def onGuideGravity(self, component):
        kwds = {
            'name': component.componentname,
            'category': 'optics',
            'type': 'Guide_gravity',
            'supplier': 'mcstas2',
            }
        self.onNeutronComponent( **kwds )

        opts = {}

        parameters = {
            'reflect': component.reflect,
            'w1': component.w1,
            'h1': component.h1,
            'w2': component.w2,
            'h2': component.h2,
            'l': component.l,
            'R0': component.R0,
            'Qc': component.Qc,
            'alpha': component.alpha,
            'm': component.m,
            'W': component.W,
            'k': component.k,
            'd': component.d,
            'mleft': component.mleft,
            'mright': component.mright,
            'mtop': component.mtop,
            'mbottom': component.mbottom,
            'kh': component.kh,
            'G': component.G,
            'wavy': component.wavy,
            'wavy_z': component.wavy_z,
            'wavy_tb': component.wavy_tb,
            'wavy_lr': component.wavy_lr,
            'chamfers': component.chamfers,
            'chamfers_z': component.chamfers_z,
            'chamfers_lr': component.chamfers_lr,
            'chamfers_tb': component.chamfers_tb,
            'nelements': component.nelements,
            'nu': component.nu,
            'phase': component.phase,
            }
        for k,v in parameters.iteritems():
            opts['%s.%s' % (component.componentname, k)] = v

        self.cmdline_opts.update( opts )


    def onPSDMonitor(self, component):
        kwds = {
            'name': component.componentname,
            'category': 'monitors',
            'type': 'PSD_monitor',
            'supplier': 'mcstas2',
            }
        self.onNeutronComponent( **kwds )

        opts = {}

        parameters = {
            'xmin': component.x_min,
            'xmax': component.x_max,
            'ymin': component.y_min,
            'ymax': component.y_max,
            'xwidth': component.xwidth,
            'yheight': component.yheight,
            'nx': component.nx,
            'ny': component.ny,
            'filename': outputfilename(component),
            }
        for k,v in parameters.iteritems():
            opts['%s.%s' % (component.componentname, k)] = v

        self.cmdline_opts.update( opts )


    def onNDMonitor(self, component):
        kwds = {
            'name': component.componentname,
            'category': 'monitors',
            'type': 'Monitor_nD',
            'supplier': 'mcstas2',
            }
        self.onNeutronComponent( **kwds )

        opts = {}

        parameters = {
            'xwidth': component.xwidth,
            'yheight': component.yheight,
            'zthick': component.zthick,
            'xmin': component.x_min,
            'xmax': component.x_max,
            'ymin': component.y_min,
            'ymax': component.y_max,
            'zmin': component.zmin,
            'zmax': component.zmax,
            'bins': component.bins,
            'min': component.min,
            'max': component.max,
            'options': component.options,
            'filename': outputfilename(component),
            'user1': component.user1,
            'user2': component.user2,
            'username1': component.username1,
            'username2': component.username2,
            }
        for k,v in parameters.iteritems():
            opts['%s.%s' % (component.componentname, k)] = v

        self.cmdline_opts.update( opts )


    def onVanadiumPlate(self, component):
        kwds = {
            'name': component.componentname,
            'category': 'samples',
            'type': 'V_sample',
            'supplier': 'mcstas2',
            }
        self.onNeutronComponent( **kwds )

        opts = {}

        parameters = {
            'radius_i': component.radius_i,
            'radius_o': component.radius_o,
            'h': component.h,
            'focus_r': component.focus_r,
            'pack': component.pack,
            'frac': component.frac,
            'f_QE': component.f_QE,
            'gamma': component.gamma,
            'target_x': component.target_x,
            'target_y': component.target_y,
            'target_z': component.target_z,
            'focus_xw': component.focus_xw,
            'focus_yh': component.focus_yh,
            'focus_aw': component.focus_aw,
            'focus_ah': component.focus_ah,
            'xwidth': component.xwidth,
            'yheight': component.yheight,
            'zthick': component.zthick,
            'sig_a': component.sig_a,
            'sig_i': component.sig_i,
            'V0': component.V0,
            'target_index': component.target_index,
            }
        for k,v in parameters.iteritems():
            opts['%s.%s' % (component.componentname, k)] = v

        self.cmdline_opts.update( opts )


    def onPSD_TEWMonitor(self, component):
        kwds = {
            'name': component.componentname,
            'category': 'monitors',
            'type': 'PSD_TEW_monitor',
            'supplier': 'mcstas2',
            }
        self.onNeutronComponent( **kwds )

        opts = {}

        parameters = {
            'xwidth': component.xwidth,
            'yheight': component.yheight,
            'bmin': component.bmin,
            'bmax': component.bmax,
            'deltab': component.deltab,
            'restore_neutron': component.restore_neutron,
            'nxchan': component.nxchan,
            'nychan': component.nychan,
            'nbchan': component.nbchan,
            'type': component.type,
            'filename': outputfilename(component),
            'format': component.format,
            }
        for k,v in parameters.iteritems():
            opts['%s.%s' % (component.componentname, k)] = v

        self.cmdline_opts.update( opts )


    def onMonitor(self, component):
        kwds = {
            'name': component.componentname,
            'category': 'monitors',
            'type': 'Monitor',
            'supplier': 'mcstas2',
            }
        self.onNeutronComponent( **kwds )

        opts = {}

        parameters = {
            'xmin': component.x_min,
            'xmax': component.x_max,
            'ymin': component.y_min,
            'ymax': component.y_max,
            'xwidth': component.xwidth,
            'yheight': component.yheight,
            }
        for k,v in parameters.iteritems():
            opts['%s.%s' % (component.componentname, k)] = v

        self.cmdline_opts.update( opts )


