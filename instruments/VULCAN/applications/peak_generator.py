# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

"""
PeakGenerator - simple generator of peaks. It takes file with diffraction data
                and creates peaks file
"""

import os
import re
import math
from time import localtime, strftime

COMMENT = "(#[^\n]*\n)"  # Python comment
PI      = 3.14159265

class PeakGenerator:
    
    def __init__(self, filename=None, config=None, linewidth=0, dwfactor=1):
        self._out   = ""
        self._peaks = []

        self._linewidth = linewidth     # Intrinsic line width 
        self._dwfactor  = dwfactor      # Debye-Waller factor
        
        # Check the config first
        if config:
            self._config = config
            self.parse()
            return

        # otherwise try to use file   
        if not os.path.exists(filename):
            raise Exception, "Error: File does not exist"

        self._config    = open(filename).read()
        self.parse()


    def parse(self):
        "Parses config input"
        text    = self._config
        text.replace("\r", "")  # Clean from CR

        lines   = text.splitlines()
        cell    = lines[1]      # Second lines should have lattice parameters
        cell    = cell.replace("#", "")
        par     = cell.split()

        # Parse lattice parameters: a, b, c, alpha, beta, gamma
        (self._a, self._b, self._c, self._alpha, self._beta, self._gamma) = \
        (float(par[1]), float(par[2]), float(par[3]), float(par[4]), float(par[5]), float(par[6]))
        
        p       = re.compile(COMMENT, re.DOTALL)    # Remove comments
        s       = re.sub(p, '', text)
        lines   = s.split("\n")
        for l in lines:
            l   = l.strip()
            if l == "":     # Empty line
                continue
            row     = l.split()
            peak    = {}
            peak["h"]   = int(row[0])
            peak["k"]   = int(row[1])
            peak["l"]   = int(row[2])
            peak["F"]   = float(row[12])      # F factor
            peak["mult"]    = int(row[16])    # Multiplicity
            self._peaks.append(peak)
        

    def _qVector(self, h, k, l):
        "Returns q-vector from (h, k, l) parameters"
        import matter   # import matter package
        import numpy

        lat     = matter.Lattice(self._a, self._b, self._c, self._alpha, self._beta, self._gamma)
        rb      = lat.recbase   # Reciprocal matrix
        trb     = rb.T          # Should I transpose it?
        q       = 2*PI*(h*trb[0] + k*trb[1] + l*trb[2])
        return numpy.sqrt(numpy.dot(q,q))


    def _fSquared(self, F):
        return F*F


    def save(self, filename):
        "Generates python script and saves it into file"
        s   = "from mccomponents.sample.diffraction.SimplePowderDiffractionKernel import Peak\n\n"
        s   += "peaks = [\n"
        for p in self._peaks:
            s   += "    Peak(q=%f, F_squared=%f, multiplicity=%d, intrinsic_line_width=%f, DebyeWaller_factor=%f),\n" % \
                  (self._qVector(p["h"], p["k"], p["l"]), self._fSquared(p["F"]), p["mult"], self._linewidth, self._dwfactor)
        s   += "]\n\n\n"
        s   += "# Generated by PeakGenerator.py, %s \n" % strftime("%b %d, %Y %H:%M", localtime())
        open(filename, "w").write(s)        


    def toString(self):
        s   = "H\tK\tL\tF\tMULT\n\n"
        for p in self._peaks:
            s   += "%d\t%d\t%d\t%.2f\t%d\n" % (p["h"], p["k"], p["l"], p["F"], p["mult"])

        return s


if __name__ == "__main__":
    filename    = "../tests/sample-kernel-detector-system/Al_assembly2/Al.laz"
    config      = open(filename).read()
    gen = PeakGenerator(config=config)
    gen.save("peaks.py")
    