#!/usr/bin/env python

"""
PeakGenerator - simple generator of peaks. It takes file with diffraction data
                and creates peaks file
"""

# XXX: For now you have to pass the lattice size to constrcutor.
#      Need to take lattice size from file!

import os
import re
import math
from time import localtime, strftime

COMMENT = "(#[^\n]*\n)"  # Python comment
PI      = 3.14159265

class PeakGenerator:
    
    def __init__(self, filename, a=0):
        self._out   = ""
        self._peaks = []
        self._filename  = filename
        self._a     = a     # Lattice size
        if not os.path.exists(filename):
            print "Error: File does not exist"
            return

        if a <= 0:
            print "Error: Lattice size should be positive"
            return

        self.parse()


    def parse(self):
        f       = open(self._filename)
        text    = f.read()
        
        text.replace("\r", "")      # Clean from CR
        p       = re.compile(COMMENT, re.DOTALL)    # Remove comments
        s       = re.sub(p, '', text)
        lines   = s.split("\n")
        for l in lines:
            l   = l.strip()
            if l == "":     # Empty line
                continue
            row     = l.split()
            peak    = {}
            peak["h"]   = int(row[0])
            peak["k"]   = int(row[1])
            peak["l"]   = int(row[2])
            peak["F"]   = float(row[12])        # F factor
            peak["mult"]    = int(row[16])    # Multiplicity
            self._peaks.append(peak)
        
        f.close()
        

    def _qVector(self, h, k, l):
        "Returns q-vector from (h, k, l) parameters"
        return 2*PI/self._a*math.sqrt(h*h+k*k+l*l)


    def _fSquared(self, F):
        return F*F


    def save(self, filename):
        "Generates python script and saves it into file"
        s   = "from mccomponents.sample.diffraction.SimplePowderDiffractionKernel import Peak\n\n"
        s   += "peaks = [\n"
        for p in self._peaks:
            s   += "    Peak(q=%f, F_squared=%f, multiplicity=%d, intrinsic_line_width=%f, DebyeWaller_factor=%f),\n" % \
                  (self._qVector(p["h"], p["k"], p["l"]), self._fSquared(p["F"]), p["mult"], 0, 0)
        s   += "]\n\n\n"
        s   += "# Generated by PeakGenerator.py, %s \n" % strftime("%d %b %Y %H:%M", localtime())
        open(filename, "w").write(s)        


    def toString(self):
        s   = "H\tK\tL\tF\tMULT\n\n"
        for p in self._peaks:
            s   += "%d\t%d\t%d\t%.2f\t%d\n" % (p["h"], p["k"], p["l"], p["F"], p["mult"])

        return s


if __name__ == "__main__":
    gen = PeakGenerator("Al.laz", a=4.04932)
    gen.save("peaks.py")
    