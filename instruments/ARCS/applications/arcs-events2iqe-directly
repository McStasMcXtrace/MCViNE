#!/usr/bin/env python


"""
convert scattereed neutron events.dat to i(q,e) histogram directly
without going through nexus file and mantid reduction.
"""


appname = 'arcs-events2iqe-directly'
cmd_help = """
convert scattereed neutron events.dat to i(q,e) histogram directly,
without going through nexus file and mantid reduction.

Examples:

 $ arcs-events2iqe-directly --events=events.dat

"""
import pyre.units.length
import pyre.units.energy
import pyre.units.time
npixels = 117760 # number of pixels for ARCS
mod_period=0.015*pyre.units.time.s # moderator period
mod2sample=13.6*pyre.units.length.meter


# application 
from pyre.applications.Script import Script as AppBase
class App(AppBase):

    class Inventory(AppBase.Inventory):

        import pyre.inventory
        events = pyre.inventory.str('events', default='events.dat')

        tofbinsize = pyre.inventory.float('tofbinsize', default=0.1) # unit: microsecond
        t0 = pyre.inventory.float('t0', default=0) # unit: microsecond
        Ei = pyre.inventory.float('Ei', default=100)
        Eaxis = pyre.inventory.array('Eaxis', default=(-50,50,1.))
        Qaxis = pyre.inventory.array('Qaxis', default=(0,11, 0.1))
        pixelpositionsfile = pyre.inventory.str('pixelpositionsfile', default='pixelID2position.bin')
        solidanglesfile = pyre.inventory.str('solidanglesfile', default='solidangles.bin')
        out = pyre.inventory.str('out', default='iqe.h5')
        # workdir = pyre.inventory.str('workdir', default='work-arcs-events2iqe-directly')

        
    def main(self):
        events = self.inventory.events; events = os.path.abspath(events)
        # workdir = self.inventory.workdir; workdir = os.path.abspath(workdir)
        tofbinsize = self.inventory.tofbinsize
        t0 = self.inventory.t0
        Ei = self.inventory.Ei
        Qaxis= self.inventory.Qaxis
        Eaxis = self.inventory.Eaxis
        pixelpositionsfile = self.inventory.pixelpositionsfile
        iqe = reduceToIQE(
            events, tofbinsize, t0, Qaxis, Eaxis, Ei, pixelpositionsfile)

        out = self.inventory.out
        import histogram.hdf as hh
        hh.dump(iqe, out)
        return
    
    
    def help(self):
        print cmd_help
    

# main methods
def reduceToIQE(
    eventsfile, tofbinsize, t0, Qaxis, Eaxis, Ei,
    pixelpositionsfile='pixelID2position.bin',
    solidanglesfile='solidangles.bin',
    ):
    from mccomponents.detector.reduction_utils import events2IQE
    from mccomponents.detector.event_utils import datatype
    import os
    nevents = os.path.getsize(eventsfile)*1. / datatype.itemsize
    assert int(nevents) == nevents
    
    outfile = 'intensities.dat'
    iqe = events2IQE(
        eventsfile, nevents, 
        outfile,
        pixelpositionsfile, solidanglesfile,
        npixels,
        mod2sample=mod2sample,
        Ei=Ei*pyre.units.energy.meV,
        Qaxis = Qaxis, Eaxis = Eaxis,
        tofUnit=tofbinsize*pyre.units.time.microsecond,
        toffset=t0*pyre.units.time.microsecond,
        tofmax=mod_period,
        )
    return iqe



import numpy as np
from mcvine.deployment_info import mcvinedir
import os, subprocess as sp


def main():
    app = App(appname)
    app.run()
    return


interactive = False

if __name__ == '__main__': 
    interactive = True
    main()
