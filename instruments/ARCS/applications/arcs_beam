#!/usr/bin/env python

import os, time

from pyre.applications.Script import Script as base
class App(base):

    class Inventory(base.Inventory):

        import pyre.inventory

        fermi_chopper = pyre.inventory.str('fermi_chopper', default='')
        fermi_chopper.meta['tip'] = 'The choice of fermi chopper'

        fermi_nu = pyre.inventory.float('fermi_nu', default=600)
        fermi_nu.meta['tip'] = 'Spinning frequency of fermi chopper'
        
        T0_nu = pyre.inventory.float('T0_nu', default=60)
        T0_nu.meta['tip'] = 'Spinning frequency of T0 chopper'
        
        E = pyre.inventory.float('E', default=70)
        E.meta['tip'] = 'desired incident beam energy. unit: meV'

        emission_time = pyre.inventory.float('emission_time', default=-1)
        emission_time.meta['tip'] = 'emission time for moderator unit (microsecond)'

        ncount = pyre.inventory.float('ncount', default=1000)


    def main(self):
        self._run_arcs_m2s()
        self._run_beam()
        self._computeFocusedSpectraForRealMonitors()
        self._runMonitorsAtSample()
        return


    def _runMonitorsAtSample(self):
        E = self.inventory.E
        from mcni.utils.conversion import e2v
        v = e2v(E)
        from pyre.units.time import second
        L = 13.6
        t = L/v

        neutronfile = 'out/neutrons'
        from mcni.neutron_storage.idf_usenumpy import count
        n = count(neutronfile)

        cmd = ['arcs_analyze_beam']
        cmd += ['--output-dir=atsample']
        cmd += ['--ncount=%s' % n]
        cmd += ['--buffer_size=%s' % min(n, 1e6)]
        cmd += ['--source.path=%s' % neutronfile]
        cmd += ['--monitor.mtof.tofmin=%s' % (t*0.9)]
        cmd += ['--monitor.mtof.tofmax=%s' % (t*1.1)]
        cmd += ['--monitor.mtof.ntof=%s' % (200)]
        cmd += ['--monitor.menergy.energymin=%s' % (E*0.9)]
        cmd += ['--monitor.menergy.energymax=%s' % (E*1.1)]
        cmd += ['--monitor.menergy.nenergy=%s' % (200)]
        cmd = ' '.join(cmd)
        print 'Running beam monitors...'
        self._exec(cmd)
        print 'done.'
        time.sleep(1)
        return


    def _computeFocusedSpectraForRealMonitors(self):
        E = self.inventory.E
        from mcni.utils.conversion import e2v
        v = e2v(E)
        from pyre.units.time import second
        import histogram.hdf as hh, histogram as H
        
        m1 = hh.load('out/mon1-tof.h5', 'I(tof)')
        L1 = 11.831
        t1 = L1/v #* second
        m1p = m1[(t1*0.9, t1*1.1)]
        m1pc = H.histogram('I(tof)', m1p.axes(), data=m1p.I, errors=m1p.E2)

        hh.dump(m1pc, 'mon1-itof-focused.h5', '/', 'c')

        m2 = hh.load('out/mon2-tof.h5', 'I(tof)')
        L2 = 18.5
        t2 = L2/v #* second
        m2p = m2[(t2*0.9, t2*1.1)]
        m2pc = H.histogram('I(tof)', m2p.axes(), data=m2p.I, errors=m2p.E2)

        hh.dump(m2pc, 'mon2-itof-focused.h5', '/', 'c')
        return

    
    def _run_arcs_m2s(self):
        cmd = ['arcs-m2s']
        keys = [
            'fermi_nu',
            'T0_nu',
            'E',
            'emission_time',
            ]
        cmd += self._buildCmdFromInventory(keys)
        cmd += ['--- -dump-pml=yes', '-h', '>arcs-m2s.out']
        cmd = ' '.join(cmd)
        print 'Generating pml for arcs beam instrument...'
        self._exec(cmd)
        print 'done.'
        time.sleep(1)
        return


    def _run_beam(self):
        cmd = ['arcs_moderator2sample']
        keys = ['ncount']
        cmd += self._buildCmdFromInventory(keys)
        cmd += ['-buffer_size=%s' % int(self.inventory.ncount/10)]
        moddat = os.path.join(
            os.environ['MCVINE_DIR'], 'share', 'mcvine',
            'instruments', 'ARCS', 'source_sct521_bu_17_1.dat',
            )
        cmd += ['-moderator.S_filename=%s' % moddat]
        cmd = ' '.join(cmd)
        self._exec(cmd)
        return


    def _buildCmdFromInventory(self, keys):
        kwds = {}
        for k in keys:
            v = getattr(self.inventory, k)
            kwds[k] = v
            continue
        return ['-%s=%s' % (k,v) for k,v in kwds.iteritems()]
    
    
    def _exec(self, cmd):
        print " -> running %s..." % cmd
        if os.system(cmd):
            raise RuntimeError, "failed"
        
def main():
    app = App('arcs_beam')
    app.run()
    return

if __name__ == '__main__': main()
