#!/usr/bin/env python


"""
convert scattereed neutrons to nexus file.
"""


appname = 'arcs-neutrons2nxs'
cmd_help = """
convert scattereed neutrons to nexus file.

Examples:

 $ arcs-neutrons2nxs --neutrons=scattered-neutrons-example
"""
tofbinsize = 0.1 # microsecond


# application 
from pyre.applications.Script import Script as AppBase
class App(AppBase):

    class Inventory(AppBase.Inventory):

        import pyre.inventory
        neutrons = pyre.inventory.str('neutrons', default='neutrons.dat')
        nodes = pyre.inventory.int('nodes', default=0)
        nxs = pyre.inventory.str('nxs', default='arcs-sim.nxs')
        type = pyre.inventory.str('type', default='raw')
        workdir = pyre.inventory.str('workdir', default='work-arcs-neutrons2nxs')

        
    def main(self):
        neutrons = self.inventory.neutrons; neutrons = os.path.abspath(neutrons)
        nxs = self.inventory.nxs; nxs = os.path.abspath(nxs)
        workdir = self.inventory.workdir; workdir = os.path.abspath(workdir)
        if os.path.exists(workdir):
            raise IOError("%s already exists" % workdir)
        os.makedirs(workdir)

        type = self.inventory.type
        nodes = self.inventory.nodes
        run(neutrons, nxs, type, workdir, nodes)
        return


    def help(self):
        print cmd_help
    

# main methods
def run(neutrons, nxs, type, workdir, nodes):
    import time
    eventdat = sendneutronstodetsys(neutronfile=neutrons, workdir=os.path.join(workdir, 'todetsys'), nodes=nodes)
    time.sleep(1)
    event2nxs(eventdat, nxs, type, workdir)
    return


def sendneutronstodetsys(
    neutronfile=None,
    nodes=None,
    workdir = None,
    ):
    d = locals()
    cmd = 'arcs-neutrons2events --neutrons=%(neutronfile)s --nodes=%(nodes)s --workdir=%(workdir)s' % d
    execute(cmd, os.curdir)
    return os.path.join(workdir, 'out', 'events.dat')


def event2nxs(eventdat, nxs, type, workdir):
    d = dict(globals())
    d.update(locals())
    cmd = 'arcs-events2nxs --events=%(eventdat)s --type=%(type)s --nxs=%(nxs)s --tofbinsize=%(tofbinsize)s' % d
    execute(cmd, workdir)
    return


# utils
import os, subprocess as sp, shlex
def execute(cmd, workdir):
    print '* executing %s... at %s' % (cmd, workdir)
    args = shlex.split(cmd)
    p = sp.Popen(args, cwd=workdir)
    p.communicate()
    if p.wait():
        raise RuntimeError, "%r failed" % cmd
    return


# constants


def main():
    app = App(appname)
    app.run()
    return


interactive = False

if __name__ == '__main__': 
    interactive = True
    main()
