#!/usr/bin/env python


"""
convert scattereed neutrons to nexus file.
"""


appname = 'arcs-neutrons2nxs'
cmd_help = """
convert scattereed neutrons to nexus file.

Examples:

 $ arcs-neutrons2nxs --neutrons=scattered-neutrons-example
"""
tofbinsize = 0.1 # microsecond


# application 
from pyre.applications.Script import Script as AppBase
class App(AppBase):

    class Inventory(AppBase.Inventory):

        import pyre.inventory
        neutrons = pyre.inventory.str('neutrons', default='neutrons.dat')
        nxs = pyre.inventory.str('nxs', default='arcs-sim.nxs')
        type = pyre.inventory.str('type', default='raw')
        workdir = pyre.inventory.str('workdir', default='work-arcs-neutrons2nxs')

        
    def main(self):
        neutrons = self.inventory.neutrons; neutrons = os.path.abspath(neutrons)
        nxs = self.inventory.nxs; nxs = os.path.abspath(nxs)
        workdir = self.inventory.workdir; workdir = os.path.abspath(workdir)
        type = self.inventory.type
        run(neutrons, nxs, type, workdir)
        return


    def help(self):
        print cmd_help
    

# main methods
def run(neutrons, nxs, type, workdir):
    eventdat = sendneutronstodetsys(neutronfile=neutrons, workdir=os.path.join(workdir, 'todetsys'))
    event2nxs(eventdat, nxs, type, workdir)
    return


def event2nxs(eventdat, nxs, type, workdir):
    cmd = 'arcs-events2nxs --events=%(eventdat)s --type=%(type)s --nxs=%(nxs)s --tofbinsize=%(tofbinsize)s' % locals()
    execute(cmd, workdir)
    return


def sendneutronstodetsys(
    neutronfile=None, scattering_rundir=None, nodes=None, ncount=None,
    workdir = None,
    ):
    """
    run a simulation to send neutrons to det system
    
    workdir: directory where the simulation is run
    """
    # create workdir if it does not exist
    if not os.path.exists(workdir):
        os.makedirs(workdir)
        
    # number of neutrons scattered
    if not neutronfile:
        neutronfile = os.path.join(scattering_rundir, 'out', 'scattered-neutrons')
    if not ncount:
        from mcni.neutron_storage.idf_usenumpy import count
        ncount = count(neutronfile)
        
    # create simulation command
    cmd_name = 'sd'
    sim_cmd = os.path.join(workdir, cmd_name)
    open(sim_cmd, 'wt').write(sd_txt)
    
    
    # build command
    cmd = ['python '+cmd_name]
    args = {
        'source': 'NeutronFromStorage',
        'detsys': 'DetectorSystemFromXml',
        'output-dir': 'out',
        'detsys.tofparams': '0,0.02,%s' % (1e-6*tofbinsize,), 
        'detsys.instrumentxml': arcsxml,
        'detsys.eventsdat': 'events.dat',
        'ncount': ncount,
        'source.path': neutronfile,
        }
    if nodes:
        args['mpirun.nodes'] = nodes
    cmd += ['--%s=%s' % (k,v) for k,v in args.iteritems()]
    cmd = ' '.join(cmd)
    run_sh = os.path.join(workdir, 'run.sh')
    open(run_sh, 'w').write(cmd)
    execute(cmd, workdir)

    # events.dat
    outfile = os.path.join(workdir, 'out', 'events.dat')
    return outfile

sd_txt = """
import mcvine
from mcvine.applications.InstrumentBuilder import build
components = ['source', 'detsys']
App = build(components)
app = App('sd')
app.run()
"""


# utils
import os, subprocess as sp, shlex
def execute(cmd, workdir):
    print '* executing %s... ' % cmd
    args = shlex.split(cmd)
    p = sp.Popen(args, cwd=workdir)
    p.communicate()
    if p.wait():
        raise RuntimeError, "%r failed" % cmd
    return


import numpy as np
from mcvine.deployment_info import mcvinedir
import os, subprocess as sp

#
arcsxml = os.path.join(mcvinedir, 'share', 'mcvine', 'instruments', 'ARCS', 'ARCS.xml.fornxs')

# constants
mod2sample_distance = 13.6
import pyre.units.length
import pyre.units.energy
import pyre.units.time
npixels = 117760 # number of pixels for ARCS
mod2sample=13.6*pyre.units.length.meter
mod_period=0.015*pyre.units.time.s # moderator period




def main():
    app = App(appname)
    app.run()
    return


interactive = False

if __name__ == '__main__': 
    interactive = True
    main()
