#!/usr/bin/env python


__doc__ = """
reduce ARCS nxs to I(Q,E) using mantid

Examples:

 $ arcs-reduce-nxs-using-mantid --nxs=simulated.nxs --ei_guess=100 --qaxis=0,13,0.1 --out=iqe.nxs

"""


cmd_help = __doc__
appname = 'arcs-reduce-nxs-using-mantid'



# application 
from pyre.applications.Script import Script as AppBase
class App(AppBase):

    class Inventory(AppBase.Inventory):

        import pyre.inventory
        nxs = pyre.inventory.str('nxs', default='arcs-sim.nxs')
        use_ei_guess = pyre.inventory.bool('use_ei_guess', default=False)
        ei_guess = pyre.inventory.float('ei_guess', default=0)
        qaxis = pyre.inventory.array('qaxis', default=(0,13,0.1))
        out = pyre.inventory.str('out', default='iqe.nxs')


    def main(self):
        nxs = self.inventory.nxs
        use_ei_guess = self.inventory.use_ei_guess
        ei_guess = self.inventory.ei_guess
        if ei_guess > 0:
            use_ei_guess = True
        qmin, qmax, dq = self.inventory.qaxis
        qaxis = (qmin, dq, qmax)
        outfile = self.inventory.out 
        d = {
            'nxsfile': nxs,
            'use_ei_guess': use_ei_guess,
            'ei_guess': ei_guess,
            'qaxis': qaxis,
            'outfile': outfile,
            }
        run(**d)
        return


    def help(self):
        print cmd_help
    


def run(nxsfile, qaxis, outfile, use_ei_guess=False, ei_guess=None):
    from mantid.simpleapi import DgsReduction, SofQW3, SaveNexus
    if use_ei_guess:
        DgsReduction(
            SampleInputFile=nxsfile,
            IncidentEnergyGuess=ei_guess,
            UseIncidentEnergyGuess=use_ei_guess,
            OutputWorkspace='reduced',
            )
    else:
        DgsReduction(
            SampleInputFile=nxsfile,
            OutputWorkspace='reduced',
            )
        
    SofQW3(
        InputWorkspace='reduced',
        OutputWorkspace='iqw',
        QAxisBinning=qaxis,
        EMode='Direct',
        )
    SaveNexus(
        InputWorkspace='iqw',
        Filename = outfile,
        Title = 'iqw',
        )
    return


def main():
    app = App(appname)
    app.run()
    return


interactive = False

if __name__ == '__main__': 
    interactive = True
    main()
