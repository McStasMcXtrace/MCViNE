#!/usr/bin/env python


__doc__ = """
reduce SEQUOIA nxs to I(Q,E) using mantid

Examples:

 $ sequoia-reduce-nxs-using-mantid --nxs=simulated.nxs --ei_guess=100 --qaxis=0,13,0.1 --out=iqe.nxs

"""


cmd_help = __doc__
appname = 'sequoia-reduce-nxs-using-mantid'


import os
from mcvine.deployment_info import mcvinedir
default_mcvine_idfpath = os.path.join(mcvinedir, 'share', 'mcvine', 'instruments', 'SEQUOIA', 'SEQUOIA_Definition-mcvine.xml')


# application 
from pyre.applications.Script import Script as AppBase
class App(AppBase):

    class Inventory(AppBase.Inventory):

        import pyre.inventory
        nxs = pyre.inventory.str('nxs', default='sequoia-sim.nxs')
        psi = pyre.inventory.float('psi', default=0)
        
        # idf = pyre.inventory.str('idf', default=default_mcvine_idfpath)
        use_ei_guess = pyre.inventory.bool('use_ei_guess', default=True)
        ei_guess = pyre.inventory.float('ei_guess', default=0)
        
        powder = pyre.inventory.bool('powder', default=True)
        powder.meta['tip'] = "if true, I(Q,E) will be computed"
        
        qaxis = pyre.inventory.array('qaxis', default="(0,13,0.1)")
        eaxis = pyre.inventory.array('eaxis', default=None)
        
        out = pyre.inventory.str('out', default='iqe.nxs')
        out.meta['tip'] = "output file for I(Q,E) spectrum. at this point, only valid for powder"
        
        speout = pyre.inventory.str('speout', default = 'sim.nxspe')
        speout.meta['tip'] = "nxspe output file"
        
    def main(self):
        nxs = self.inventory.nxs
        use_ei_guess = self.inventory.use_ei_guess
        ei_guess = self.inventory.ei_guess
        if ei_guess > 0:
            use_ei_guess = True
            
        d = {
            'nxsfile': nxs,
            'psi': self.inventory.psi,
            'use_ei_guess': use_ei_guess,
            'ei_guess': ei_guess,
            'speout': self.inventory.speout,
            }

        powder = self.inventory.powder
        if powder:
            qmin, qmax, dq = self.inventory.qaxis
            qaxis = (qmin, dq, qmax)
        
            eaxis = self.inventory.eaxis
            if eaxis is not None:
                emin, emax, de = eaxis
                eaxis = emin, de, emax
                
            outfile = os.path.abspath(self.inventory.out)
            d.update(
                qaxis = qaxis,
                eaxis = eaxis,
                outfile = outfile,
                )
        # idfpath = self.inventory.idf
        run(**d)
        return


    def help(self):
        print cmd_help
    

# XXX: loading a new idf does not work. see below: the function call to 
# XXX: LoadInstrument
# def run(nxsfile, idfpath, use_ei_guess, ei_guess, qaxis, outfile):
# XXX: Dec 27, 2014. trying to match mcvine-sns-reduce-by-mantid
# XXX: to introduce new parameters for single crystal reduction
# XXX: should merge with mcvine-sns-reduce-by-mantid, but
# XXX: sequoia has a special pre-process step of MoveInstrumentComponent
# XXX: when later we merge this with mcvine-sns-reduce-by-mantid
# XXX: a flexible structure to accomodate things like that should
# XXX: be implemented then.
def run(
    nxsfile,
    speout = None, psi=None,
    use_ei_guess=False, ei_guess=None,
    powder=None,
    eaxis=None, qaxis=None, 
    outfile=None,
    ):
    from mantid.simpleapi import DgsReduction, SofQW3, SaveNexus, SaveNXSPE, LoadInstrument, Load, MoveInstrumentComponent
    
    # load workspace from input nexus file
    workspace = Load(nxsfile)
    
    # XXX: the following line seems to cause trouble. probably a bug in Mantid?
    # LoadInstrument(workspace, idfpath) 
    
    # change moderator position
    # mantid: z=-20.0114
    # mcvine: z=-20.0254
    # need shift: z=-0.014
    MoveInstrumentComponent(workspace, "moderator", -1, 0, 0, -0.014, True) # workspace, component, detector, x,y,z, relative
    # MoveInstrumentComponent(workspace, "moderator", -1, 0, 0, -20.0254, False) # workspace, component, detector, x,y,z, relative
    DgsReduction(
        SampleInputWorkspace = workspace,
        IncidentEnergyGuess=ei_guess,
        UseIncidentEnergyGuess=use_ei_guess,
        OutputWorkspace='reduced',
        EnergyTransferRange = eaxis,
        )
    SaveNXSPE(
        InputWorkspace = 'reduced',
        Filename = speout,
        Efixed = 0,
        Psi = psi,
        KiOverKfScaling = True,
        )
    if powder:
        SofQW3(
            InputWorkspace='reduced',
            OutputWorkspace='iqw',
            QAxisBinning=qaxis,
            EMode='Direct',
            )
        SaveNexus(
            InputWorkspace='iqw',
            Filename = outfile,
            Title = 'iqw',
            )
    return


def main():
    app = App(appname)
    app.run()
    return



interactive = False

if __name__ == '__main__': 
    interactive = True
    main()
