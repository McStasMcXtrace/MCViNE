#!/usr/bin/env python


__doc__ = """
reduce nxs to I(Q,E) or nxspe using mantid

Examples:

 $ mcvine-reduce-by-mantid --nxs=simulated.nxs --ei_guess=100 --qaxis=0,13,0.1 --eaxis=-40,60,1. --out=iqe.nxs

"""


cmd_help = __doc__
appname = 'mcvine-reduce-by-mantid'



# application 
from pyre.applications.Script import Script as AppBase
class App(AppBase):

    class Inventory(AppBase.Inventory):

        import pyre.inventory
        nxs = pyre.inventory.str('nxs', default='sim.nxs')
        psi = pyre.inventory.float('psi', default=0)
        
        use_ei_guess = pyre.inventory.bool('use_ei_guess', default=False)
        ei_guess = pyre.inventory.float('ei_guess', default=0)
        
        powder = pyre.inventory.bool('powder', default=True)
        powder.meta['tip'] = "if true, I(Q,E) will be computed"
        
        qaxis = pyre.inventory.array('qaxis', default=(0,13,0.1))
        eaxis = pyre.inventory.array('eaxis', default=None)
        
        out = pyre.inventory.str('out', default='iqe.nxs')
        out.meta['tip'] = "output file for I(Q,E) spectrum. at this point, only valid for powder"
        
        speout = pyre.inventory.str('speout', default = 'sim.nxspe')
        speout.meta['tip'] = "nxspe output file"
        
        
    def main(self):
        nxs = self.inventory.nxs
        use_ei_guess = self.inventory.use_ei_guess
        ei_guess = self.inventory.ei_guess
        if ei_guess > 0:
            use_ei_guess = True
        
        d = {
            'nxsfile': nxs,
            'psi': self.inventory.psi,
            'use_ei_guess': use_ei_guess,
            'ei_guess': ei_guess,
            'speout': self.inventory.speout,
            }

        powder = self.inventory.powder
        if powder:
            qmin, qmax, dq = self.inventory.qaxis
            qaxis = (qmin, dq, qmax)
        
            eaxis = self.inventory.eaxis
            if eaxis is not None:
                emin, emax, de = eaxis
                eaxis = emin, de, emax
        
            outfile = self.inventory.out 
            d.update(
                qaxis = qaxis,
                eaxis = eaxis,
                outfile = outfile,
                )
        run(**d)
        return


    def help(self):
        print cmd_help
    


def run(
    nxsfile, 
    speout=None,
    psi=None,
    use_ei_guess=False, ei_guess=None,
    powder=None,
    eaxis=None, qaxis=None, 
    outfile=None, 
    ):
    from mantid.simpleapi import DgsReduction, SofQW3, SaveNexus, SaveNXSPE
    if use_ei_guess:
        DgsReduction(
            SampleInputFile=nxsfile,
            IncidentEnergyGuess=ei_guess,
            UseIncidentEnergyGuess=use_ei_guess,
            OutputWorkspace='reduced',
            EnergyTransferRange=eaxis,
            )
    else:
        DgsReduction(
            SampleInputFile=nxsfile,
            OutputWorkspace='reduced',
            EnergyTransferRange=eaxis,
            )
    SaveNXSPE(
        InputWorkspace='reduced',
        Filename = speout,
        Efixed = 0,
        Psi = psi,
        KiOverKfScaling = True,
        )
    if powder:
        SofQW3(
            InputWorkspace='reduced',
            OutputWorkspace='iqw',
            QAxisBinning=qaxis,
            EMode='Direct',
            )
        SaveNexus(
            InputWorkspace='iqw',
            Filename = outfile,
            Title = 'iqw',
            )
    return


def main():
    app = App(appname)
    app.run()
    return


interactive = False

if __name__ == '__main__': 
    interactive = True
    main()
