#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2008-2014  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


"""
convert scattereed neutrons to nexus file.
"""


cmd_help = """
convert scattereed neutrons to nexus file.

Examples:

 $ mcvine-sns-neutrons2nxs --neutrons=scattered-neutrons-example --nxs=out.nxs --nodes=2
"""
tofbinsize = 0.1 # microsecond


# application 
from pyre.applications.Script import Script as AppBase
class App(AppBase):

    class Inventory(AppBase.Inventory):

        import pyre.inventory
        neutrons = pyre.inventory.str('neutrons', default='neutrons.dat')
        nodes = pyre.inventory.int('nodes', default=0)
        nxs = pyre.inventory.str('nxs', default='sim.nxs')
        type = pyre.inventory.str('type', default='raw')
        workdir = pyre.inventory.str('workdir', default='work-neutrons2nxs')
        instrument = pyre.inventory.str('instrument')
        z_rotation = pyre.inventory.float('z_rotation', default=0)
        z_rotation.help = 'rotation angle (degree) around z (vertical) applied to detector system'
        detsys = pyre.inventory.str('detsys', default=None)
        detsys.help = "path instrument.xml.fornxs (danse). this overrides the instrument option. should not need this normally"
        
    def main(self):
        neutrons = self.inventory.neutrons; neutrons = os.path.abspath(neutrons)
        nxs = self.inventory.nxs; nxs = os.path.abspath(nxs)
        workdir = self.inventory.workdir; workdir = os.path.abspath(workdir)
        if os.path.exists(workdir):
            raise IOError("%s already exists" % workdir)
        os.makedirs(workdir)
        
        type = self.inventory.type
        nodes = self.inventory.nodes
        instrument = self.inventory.instrument
        detsys = self.inventory.detsys
        z_rotation = self.inventory.z_rotation
        run(neutrons, nxs, type, workdir, nodes, instrument, z_rotation, detsys)
        return
    

    def help(self):
        print cmd_help
    

# main methods
def run(neutrons, nxs, type, workdir, nodes, instrument, z_rotation, detsys):
    import time
    eventdat = sendneutronstodetsys(neutronfile=neutrons, workdir=os.path.join(workdir, 'todetsys'), nodes=nodes, instrument=instrument, z_rotation=z_rotation, detsys=detsys)
    time.sleep(10)
    event2nxs(eventdat, nxs, type, workdir, instrument)
    return


def sendneutronstodetsys(
    neutronfile=None,
    nodes=None,
    workdir = None,
    instrument = None,
    z_rotation = None,
    detsys = None,
    ):
    d = locals()
    cmd = 'mcvine-sns-neutrons2events --neutrons=%(neutronfile)s --nodes=%(nodes)s --workdir=%(workdir)s --instrument=%(instrument)s --z_rotation=%(z_rotation)s' % d
    if detsys:
        cmd += ' --detsys=%(detsys)s' % d
    execute(cmd, os.curdir)
    return os.path.join(workdir, 'out', 'events.dat')


def event2nxs(eventdat, nxs, type, workdir, instrument):
    d = dict(globals())
    d.update(locals())
    cmd = 'mcvine-sns-events2nxs --events=%(eventdat)s --type=%(type)s --nxs=%(nxs)s --tofbinsize=%(tofbinsize)s --instrument=%(instrument)s' % d
    execute(cmd, workdir)
    return


# utils
import os, subprocess as sp, shlex
def execute(cmd, workdir):
    print '* executing %s... at %s' % (cmd, workdir)
    args = shlex.split(cmd)
    p = sp.Popen(args, cwd=workdir)
    p.communicate()
    if p.wait():
        raise RuntimeError, "%r failed" % cmd
    return


def main():
    app = App(name='mcvine-sns-neutrons2nxs')
    app.run()
    return

if __name__ == '__main__': main()

#
# version
__id__ = "$Id$"

# End of file 
