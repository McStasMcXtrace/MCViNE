#!/usr/bin/env python

# hyspec_moderator2sample

class arm1(object):
  name='arm1'
  parameters={}
  extra='\nAT (0,0,0) ABSOLUTE\n\n\n\n\n\n'
  position=((0.0, 0.0, 0.0), 'absolute', None)
  type='Arm'
  orientation=((0, 0, 0), 'absolute', None)

class source_00(object):
  name='source_00'
  parameters={'yh': '0.132', 'dist': '2.5', 'Emin': 'E_min', 'Emax': 'E_max', 'tinmin': '0', 'sample_t': '1', 'height': '0.12', 'width': '0.10', 'proton_T': '0.7', 'tinmax': '5000', 'sample_E': '2', 'S_filename': 'sourcename', 'xw': '0.04'}
  extra='\n  AT (0,0,0) RELATIVE arm1\n\n\n\n'
  position=((0.0, 0.0, 0.0), 'relative', 'arm1')
  type='SNS_source4'
  orientation=((0, 0, 0), 'relative', 'arm1')

class Mon0_toF(object):
  name='Mon0_toF'
  parameters={'nchan': '1000', 'tmin': 't_mon0_min', 'ymax': '0.100', 'tmax': 't_mon0_max', 'filename': '"Mon0_ToF.dat"', 'xmax': '0.03', 'xmin': '-0.03', 'ymin': '-0.100'}
  extra='\nAT (0, 0, POS_G1A-0.002) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' POS_G1A-0.002'), 'relative', 'arm1')
  type='TOF_monitor2'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class Mon0_total(object):
  name='Mon0_total'
  parameters={'xmin': '-0.03', 'ymin': '-0.1', 'ymax': '0.1', 'xmax': '0.03'}
  extra='\n  AT (0, 0, POS_G1A-0.001) RELATIVE arm1\n  ROTATED (0, 0, 0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' POS_G1A-0.001'), 'relative', 'arm1')
  type='Monitor'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class G1A_guide(object):
  name='G1A_guide'
  parameters={'R0': '0.98', 'W': '0.0001', 'h2': '0.141', 'h1': '0.132', 'm': '3.0', 'l': 'LEN_G1A', 'Qc': '0.022', 'w2': '0.04', 'w1': '0.04', 'alpha': '5.54'}
  extra='\nAT (0, 0, POS_G1A) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n\n\n'
  position=((0.0, 0.0, ' POS_G1A'), 'relative', 'arm1')
  type='Guide'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class G1B_guide(object):
  name='G1B_guide'
  parameters={'R0': '0.98', 'W': '0.0001', 'h2': '0.15', 'h1': '0.141', 'm': '3.0', 'l': 'LEN_G1B', 'Qc': '0.022', 'w2': '0.04', 'w1': '0.04', 'alpha': '5.54'}
  extra='\nAT (0, 0, POS_G1B) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' POS_G1B'), 'relative', 'arm1')
  type='Guide'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class G1C_guide(object):
  name='G1C_guide'
  parameters={'R0': '0.98', 'W': '0.0001', 'h2': '0.15', 'h1': '0.15', 'm': '3.0', 'l': 'LEN_G1C', 'Qc': '0.022', 'w2': '0.04', 'w1': '0.04', 'alpha': '5.54'}
  extra='\nAT (0, 0, POS_G1C) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n\n\n'
  position=((0.0, 0.0, ' POS_G1C'), 'relative', 'arm1')
  type='Guide'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class T0_T1A_guide(object):
  name='T0_T1A_guide'
  parameters={'R0': '0.98', 'W': '0.0001', 'h2': '0.15', 'h1': '0.15', 'm': '3.0', 'l': 'LEN_T0_T1A', 'Qc': '0.022', 'w2': '0.04', 'w1': '0.04', 'alpha': '5.54'}
  extra='\nAT (0, 0, POS_T0_T1A) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' POS_T0_T1A'), 'relative', 'arm1')
  type='Guide'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class T1A_chopper(object):
  name='T1A_chopper'
  parameters={'n': '1', 'pha': 'phase_1A', 'R': 'radius_1A', 'w': 'wid_1A', 'f': 'ang_freq_1A'}
  extra='\nWHEN( if_T1A > 0.9 && if_T1A < 1.1) \nAT (0, 0, POS_T1A) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\r\n\n\n'
  position=((0.0, 0.0, ' POS_T1A'), 'relative', 'arm1')
  type='Chopper_v_mark'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class G2_curved_guide(object):
  name='G2_curved_guide'
  parameters={'dseg': '0.001', 'R0': '0.98', 'W': '0.0001', 'mb': '3.0', 'zout': '0', 'ml': '3.0', 'h1': '0.15', 'l': '0.500', 'xout': '0', 'mt': '3.0', 'Qc': '0.022', 'R': 'Rc', 'w1': '0.04', 'mr': 'Mi', 'alpha': '5.54', 'nseg': '48', 'psi_out': '0'}
  extra=' \nAT (0, 0, L1) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n\n\n'
  position=((0.0, 0.0, ' L1'), 'relative', 'arm1')
  type='Guide_curved_mark'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class G3_guide(object):
  name='G3_guide'
  parameters={'R0': '0.98', 'W': '0.0001', 'h2': 'H2_G3', 'h1': 'H1_G3', 'm': 'M4', 'l': 'LEN_G3', 'Qc': '0.022', 'w2': 'W2_G3', 'w1': 'W1_G3', 'alpha': '5.54'}
  extra='\nAT (0, 0, POS_G3) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' POS_G3'), 'relative', 'arm1')
  type='Guide'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class Shutter2_guide(object):
  name='Shutter2_guide'
  parameters={'R0': '0.98', 'W': '0.0001', 'h2': 'H1_SHUT2', 'h1': 'H1_SHUT2', 'm': 'M4', 'l': 'LEN_SHUT2', 'Qc': '0.022', 'w2': 'W2_SHUT2', 'w1': 'W1_SHUT2', 'alpha': '5.54'}
  extra='\nAT (0, 0, POS_SHUT2) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' POS_SHUT2'), 'relative', 'arm1')
  type='Guide'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class Shutter2_valve_guide(object):
  name='Shutter2_valve_guide'
  parameters={'R0': '0.98', 'W': '0.0001', 'h2': 'H2_SHUT2_VALV', 'h1': 'H1_SHUT2_VALV', 'm': 'M4', 'l': 'LEN_SHUT2_VALV', 'Qc': '0.022', 'w2': 'W2_SHUT2_VALV', 'w1': 'W1_SHUT2_VALV', 'alpha': '5.54'}
  extra='\nAT (0, 0, (POS_SHUT2 + LEN_SHUT2)) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' (POS_SHUT2 + LEN_SHUT2)'), 'relative', 'arm1')
  type='Guide'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class Valve_mon1_guide(object):
  name='Valve_mon1_guide'
  parameters={'R0': '0.98', 'W': '0.0001', 'h2': 'H2_VALV_MON1', 'h1': 'H1_VALV_MON1', 'm': 'M4', 'l': 'LEN_VALV_MON1', 'Qc': '0.022', 'w2': 'W2_VALV_MON1', 'w1': 'W1_VALV_MON1', 'alpha': '5.54'}
  extra='\nAT (0, 0, (POS_VALV + HALF_GAP_VALV)) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' (POS_VALV + HALF_GAP_VALV)'), 'relative', 'arm1')
  type='Guide'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class Mon1_toF(object):
  name='Mon1_toF'
  parameters={'nchan': 'nos_mon1', 'tmin': 't_mon1_min', 'ymax': '0.100', 'tmax': 't_mon1_max', 'filename': '"Mon1_ToF.dat"', 'xmax': '0.03', 'xmin': '-0.03', 'ymin': '-0.100'}
  extra='\nAT (0, 0, POS_MON1) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' POS_MON1'), 'relative', 'arm1')
  type='TOF_monitor2'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class Mon1_total(object):
  name='Mon1_total'
  parameters={'xmin': '-0.03', 'ymin': '-0.1', 'ymax': '0.1', 'xmax': '0.03'}
  extra='\n  AT (0, 0, POS_MON1+0.001) RELATIVE arm1\n  ROTATED (0, 0, 0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' POS_MON1+0.001'), 'relative', 'arm1')
  type='Monitor'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class Mon1_t1b_guide(object):
  name='Mon1_t1b_guide'
  parameters={'R0': '0.98', 'W': '0.0001', 'h2': 'H2_MON1_T1B', 'h1': 'H1_MON1_T1B', 'm': 'M4', 'l': 'LEN_MON1_T1B', 'Qc': '0.022', 'w2': 'W2_MON1_T1B', 'w1': 'W1_MON1_T1B', 'alpha': '5.54'}
  extra='\nAT (0, 0, (POS_MON1 + HALF_GAP_MON)) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n\n\n\n'
  position=((0.0, 0.0, ' (POS_MON1 + HALF_GAP_MON)'), 'relative', 'arm1')
  type='Guide'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class T1B_chopper(object):
  name='T1B_chopper'
  parameters={'n': '1', 'pha': 'phase_1B', 'R': 'radius_1B', 'w': 'wid_1B', 'f': 'ang_freq_1B'}
  extra='\nWHEN( if_T1B > 0.9 && if_T1B < 1.1 ) \nAT (0, 0, POS_T1B) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' POS_T1B'), 'relative', 'arm1')
  type='Chopper_v_mark'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class T1B_T2_guide(object):
  name='T1B_T2_guide'
  parameters={'R0': '0.98', 'W': '0.0001', 'h2': 'H2_T1B_T2', 'h1': 'H1_T1B_T2', 'm': 'M4', 'l': 'LEN_T1B_T2', 'Qc': '0.022', 'w2': 'W2_T1B_T2', 'w1': 'W1_T1B_T2', 'alpha': '5.54'}
  extra='\nAT (0, 0, (POS_T1B + HALF_GAP_T1B)) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' (POS_T1B + HALF_GAP_T1B)'), 'relative', 'arm1')
  type='Guide'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class T2_Fermi(object):
  name='T2_Fermi'
  parameters={'rad': 'b_radius', 'dist': 'dist_eff', 'ymax': 'b_height_max', 'Vi': 'vi_eff', 'tran': 'trn', 'm': '0', 'slit': 'len', 'alpham': '0', 'Qc': '0', 'Wi': '0.0001', 'w': 'wid', 'R0': '0', 'ymin': 'b_height_min', 'nu': 'freq', 'Nslit': 'nos'}
  extra='\nWHEN( if_Fermi > 0.9 && if_Fermi < 1.1 ) \nAT (0, 0, POS_T2) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' POS_T2'), 'relative', 'arm1')
  type='FermiChopper_mark'
  orientation=((0, 0, 0), 'relative', 'arm1')

class T2_MON2_guide(object):
  name='T2_MON2_guide'
  parameters={'R0': '0.98', 'W': '0.0001', 'h2': 'H2_T2_MON2', 'h1': 'H1_T2_MON2', 'm': 'M4', 'l': 'LEN_T2_MON2', 'Qc': '0.022', 'w2': 'W2_T2_MON2', 'w1': 'W1_T2_MON2', 'alpha': '5.54'}
  extra='\nAT (0, 0, (POS_T2 + HALF_GAP_T2)) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' (POS_T2 + HALF_GAP_T2)'), 'relative', 'arm1')
  type='Guide'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class Mon2_toF(object):
  name='Mon2_toF'
  parameters={'nchan': 'nos_mon2', 'tmin': 't_mon2_min', 'ymax': '0.100', 'tmax': 't_mon2_max', 'filename': '"Mon2_ToF.dat"', 'xmax': '0.03', 'xmin': '-0.03', 'ymin': '-0.100'}
  extra='\nAT (0, 0, POS_MON2) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' POS_MON2'), 'relative', 'arm1')
  type='TOF_monitor2'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class Mon2_total(object):
  name='Mon2_total'
  parameters={'xmin': '-0.03', 'ymin': '-0.1', 'ymax': '0.1', 'xmax': '0.03'}
  extra='\n  AT (0, 0, POS_MON2+0.001) RELATIVE arm1\n  ROTATED (0, 0, 0) RELATIVE arm1\n\n\n\n'
  position=((0.0, 0.0, ' POS_MON2+0.001'), 'relative', 'arm1')
  type='Monitor'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class G4_guide(object):
  name='G4_guide'
  parameters={'R0': '0.98', 'W': '0.0001', 'h2': 'H2_G4', 'h1': 'H1_G4', 'm': 'M4', 'l': 'LEN_G4', 'Qc': '0.022', 'w2': 'W2_G4', 'w1': 'W1_G4', 'alpha': '5.54'}
  extra='\nAT (0, 0, POS_G4) RELATIVE arm1 \nROTATED (0,0,0) RELATIVE arm1\n\n\n\n'
  position=((0.0, 0.0, ' POS_G4'), 'relative', 'arm1')
  type='Guide'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm1')

class arm2(object):
  name='arm2'
  parameters={}
  extra=' \nAT (0, 0, LMM) RELATIVE arm1 \nROTATED (0, Al_ang, 0) RELATIVE arm1\n\n'
  position=((0.0, 0.0, ' LMM'), 'relative', 'arm1')
  type='Arm'
  orientation=((0.0, ' Al_ang', 0.0), 'relative', 'arm1')

class monochromator(object):
  name='monochromator'
  parameters={'NH': 'nos_h', 'RV': 'R_vert', 'r0': '0.8', 'mosaich': 'eta_h', 'yheight': 'wid_v', 't0': '0.0', 'gap': 'm_gap', 'Q': 'Q_m', 'zwidth': 'wid_h', 'mosaicv': 'eta_v', 'RH': 'R_horz', 'NV': 'nos_v'}
  extra='\nAT (0,0,0) RELATIVE arm2 \nROTATED (0, Cl_ang, 0) RELATIVE arm1\n\n\n\n'
  position=((0.0, 0.0, 0.0), 'relative', 'arm2')
  type='Monochromator_curved'
  orientation=((0.0, ' Cl_ang', 0.0), 'relative', 'arm1')

class Exit_tube(object):
  name='Exit_tube'
  parameters={'R0': '0.98', 'W': '0.0001', 'h2': '0.085', 'h1': '0.128', 'm': '0.0', 'l': '0.3', 'Qc': '0.022', 'w2': '0.04', 'w1': '0.04', 'alpha': '5.54'}
  extra='\nAT (0, 0, 0.300) RELATIVE arm2 \nROTATED (0,0,0) RELATIVE arm2\n\n\n\n\n\n'
  position=((0.0, 0.0, 0.3), 'relative', 'arm2')
  type='Guide'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm2')

class Mon3_ToF(object):
  name='Mon3_ToF'
  parameters={'nchan': 'nos_mon3', 'tmin': 't_mon3_min', 'ymax': '0.15', 'tmax': 't_mon3_max', 'filename': '"Mon3_ToF.dat"', 'xmax': '0.05', 'xmin': '-0.05', 'ymin': '-0.15'}
  extra='\nAT (0, 0, (LMS - LM3S)) RELATIVE arm2 \nROTATED (0,0,0) RELATIVE arm2\n\n'
  position=((0.0, 0.0, ' (LMS - LM3S)'), 'relative', 'arm2')
  type='TOF_monitor2'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm2')

class Mon3_total(object):
  name='Mon3_total'
  parameters={'xmin': '-0.03', 'ymin': '-0.1', 'ymax': '0.1', 'xmax': '0.03'}
  extra='\n  AT (0, 0, LMS-LM3S+0.001) RELATIVE arm2\n  ROTATED (0, 0, 0) RELATIVE arm2\n\n'
  position=((0.0, 0.0, ' LMS-LM3S+0.001'), 'relative', 'arm2')
  type='Monitor'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm2')

class Aperture1(object):
  name='Aperture1'
  parameters={'width': '0.02', 'height': '0.06'}
  extra='\nWHEN ( if_A1 > 0.9 && if_A1 < 1.1 )  \nAT (0, 0, LMS - 0.6) RELATIVE arm2\n  ROTATED (0, 0, 0) RELATIVE arm2\n\n\n\n'
  position=((0.0, 0.0, ' LMS - 0.6'), 'relative', 'arm2')
  type='Slit'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm2')

class Soeller20(object):
  name='Soeller20'
  parameters={'ymax': '0.04', 'divergence': '20.0', 'len': '0.2', 'xmax': '0.02', 'xmin': '-0.02', 'ymin': '-0.04'}
  extra='\nWHEN ( Soeller > 19.9 && Soeller < 20.1 )  \nAT (0, 0, LMS - 0.5) RELATIVE arm2\n  ROTATED (0, 0, 0) RELATIVE arm2\n\n'
  position=((0.0, 0.0, ' LMS - 0.5'), 'relative', 'arm2')
  type='Collimator_linear'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm2')

class Aperture2(object):
  name='Aperture2'
  parameters={'width': '0.017', 'height': '0.04'}
  extra='\nWHEN ( if_A2 > 0.9 && if_A2 < 1.1 )    \nAT (0, 0, LMS - 0.2) RELATIVE arm2\n  ROTATED (0, 0, 0) RELATIVE arm2\n\n\n\n\n'
  position=((0.0, 0.0, ' LMS - 0.2'), 'relative', 'arm2')
  type='Slit'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm2')

class sample_10x10(object):
  name='sample_10x10'
  parameters={'xmin': '-0.05', 'ymin': '-0.05', 'ymax': '0.05', 'xmax': '0.05'}
  extra='\n  AT (0, 0, (LMS - 0.05 - 0.0002)) RELATIVE arm2\n  ROTATED (0, 0, 0) RELATIVE arm2\n\n\n'
  position=((0.0, 0.0, ' (LMS - 0.05 - 0.0002)'), 'relative', 'arm2')
  type='Monitor'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm2')

class sample_1x1(object):
  name='sample_1x1'
  parameters={'xmin': '-0.005', 'ymin': '-0.005', 'ymax': '0.005', 'xmax': '0.005'}
  extra='\n  AT (0, 0, (LMS -0.05 - 0.0001)) RELATIVE arm2\n  ROTATED (0, 0, 0) RELATIVE arm2\n\n'
  position=((0.0, 0.0, ' (LMS -0.05 - 0.0001)'), 'relative', 'arm2')
  type='Monitor'
  orientation=((0.0, 0.0, 0.0), 'relative', 'arm2')

class recorder(object):
  name='recorder'
  parameters={}
  extra='\n  AT (0, 0, (LMS-0.05)) RELATIVE arm2\n\nEND\n\n\n\n'
  position=((0.0, 0.0, ' (LMS-0.05)'), 'relative', 'arm2')
  type='NeutronToStorage'
  orientation=((0, 0, 0), 'relative', 'arm2')

def config(Edes=20., E_min=10., E_max=30., Ortho30=False, toffset_us=-1.0, freq=180, LMS=1.8, iv=-1.0, Heusler=False, LM3S=0.72):
     
  
     
  
  from math import sqrt, pi as PI, asin
  from mcni.utils.conversion import SE2V
  import os
  
  # 
  
  M4=3.0; # 
  Mi=2.0; # 
  LG4M=0.3; #
  ih=0.0; # 
  W0=0.04;# 
  WS=0.0; #
  H0=0.15; # 
  HS=0.0; #
  
  x_mono = 0.16 ;
  L1 = 9.93 ;
  L2 = 48. * 0.501 ;
  L3 = 5.0 ;
  Rc = (0.5*L2 + L3)*L2/x_mono ;
  LMM = L1 + L2 + L3 ;
  
  GAP_T0 = 0.23 + 0.07 ;        HALF_GAP_T0 = 0.5 * GAP_T0 ;
  GAP_T1A = 0.06 ;              HALF_GAP_T1A = 0.5 * GAP_T1A ;
  GAP_T1B = 0.06 ;              HALF_GAP_T1B = 0.5 * GAP_T1B ;
  GAP_T2 = 0.24 ;               HALF_GAP_T2 = 0.5 * GAP_T2 ;
  GAP_MON = 0.0456 ;            HALF_GAP_MON = 0.5 * GAP_MON ;
  GAP_VALV = 0.08 ;             HALF_GAP_VALV = 0.5 * GAP_VALV ;
  
  L_T2_M = 2.0098 ;
  L_T1B_M = 2.7854 ;
  L_MON1_M = 3.5664 ;
  L_MON2_M = 1.4774 ;
  L_VALV_M = 3.9106 ;
  L_SHUT2_M = 4.7370 ;
  
  POS_T0 = 8.50 ;
  POS_T1A = 9.40 ;
  
  POS_G1A = 2.3203 ;      LEN_G1A = 1.8686 ;
  POS_G1B = 4.2328 ;      LEN_G1B = 2.0875 ;
  POS_G1C = 6.3203 ;      LEN_G1C = POS_T0 - HALF_GAP_T0 - POS_G1C ;
  POS_T0_T1A = POS_T0 + HALF_GAP_T0 ;
  LEN_T0_T1A = POS_T1A - POS_T0 - HALF_GAP_T1A - HALF_GAP_T0 ;
  POS_T1A_G2 = POS_T1A + HALF_GAP_T1A ;
  LEN_T1A_G2 = L1 - POS_T1A_G2 ;
  
  POS_G3 = LMM - L3 + 0.001 ;       POS_SHUT2 = LMM - L_SHUT2_M ;
  LEN_G3 = POS_SHUT2 - POS_G3 ;     LEN_SHUT2 = 0.5 ; 
  POS_VALV = LMM - L_VALV_M ;
  LEN_SHUT2_VALV = POS_VALV - POS_SHUT2 - HALF_GAP_VALV - LEN_SHUT2 ;
  POS_MON1 = LMM - L_MON1_M ;
  LEN_VALV_MON1 = POS_MON1 - POS_VALV - HALF_GAP_VALV - HALF_GAP_MON ;
  POS_T1B = LMM - L_T1B_M ;
  LEN_MON1_T1B = POS_T1B - POS_MON1 - HALF_GAP_MON - HALF_GAP_T1B ;
  POS_T2 = LMM - L_T2_M ;
  LEN_T1B_T2 = POS_T2 - POS_T1B - HALF_GAP_T1B - HALF_GAP_T2 ;
  POS_MON2 = LMM - L_MON2_M ;
  LEN_T2_MON2 = POS_MON2 - POS_T2 - HALF_GAP_T2 - HALF_GAP_MON ;
  POS_G4 = POS_MON2 + HALF_GAP_MON ;
  LEN_G4 = LMM - POS_G4 - LG4M ; 
  if (LEN_G4 <= 0.0) : LEN_G4 = 0.001 
  WA = W0 + WS * POS_G3 / (LMM + LMS - POS_G3) ; WB = WS / (LMM + LMS - POS_G3) ;
  HA = H0 + HS * POS_G3 / (LMM + LMS - POS_G3) ; HB = HS / (LMM + LMS - POS_G3) ;
  
  W1_G3 = WA ; W2_G3 = WA - WB * (POS_G3 + LEN_G3) ;
  H1_G3 = HA ; H2_G3 = HA - HB * (POS_G3 + LEN_G3) ;
  W1_SHUT2 = WA - WB * POS_SHUT2 ; W2_SHUT2 = WA - WB * (POS_SHUT2 + LEN_SHUT2) ;
  H1_SHUT2 = HA - HB * POS_SHUT2 ; H2_SHUT2 = HA - HB * (POS_SHUT2 + LEN_SHUT2) ;
  W1_SHUT2_VALV = WA - WB * (POS_SHUT2 + LEN_SHUT2) ; 
  W2_SHUT2_VALV = WA - WB * (POS_SHUT2 + LEN_SHUT2 + LEN_SHUT2_VALV) ;
  H1_SHUT2_VALV = HA - HB * (POS_SHUT2 + LEN_SHUT2) ; 
  H2_SHUT2_VALV = HA - HB * (POS_SHUT2 + LEN_SHUT2 + LEN_SHUT2_VALV) ;
  W1_VALV_MON1 = WA - WB * (POS_VALV + HALF_GAP_VALV) ; 
  W2_VALV_MON1 = WA - WB * (POS_VALV + HALF_GAP_VALV + LEN_VALV_MON1) ;
  H1_VALV_MON1 = HA - HB * (POS_VALV + HALF_GAP_VALV) ; 
  H2_VALV_MON1 = HA - HB * (POS_VALV + HALF_GAP_VALV + LEN_VALV_MON1) ;
  W1_MON1_T1B = WA - WB * (POS_MON1 + HALF_GAP_MON) ; 
  W2_MON1_T1B = WA - WB * (POS_MON1 + HALF_GAP_MON + LEN_MON1_T1B) ;
  H1_MON1_T1B = HA - HB * (POS_MON1 + HALF_GAP_MON) ; 
  H2_MON1_T1B = HA - HB * (POS_MON1 + HALF_GAP_MON + LEN_MON1_T1B) ;
  W1_T1B_T2 = WA - WB * (POS_T1B + HALF_GAP_T1B) ; 
  W2_T1B_T2 = WA - WB * (POS_T1B + HALF_GAP_T1B + LEN_T1B_T2) ;
  H1_T1B_T2 = HA - HB * (POS_T1B + HALF_GAP_T1B) ; 
  H2_T1B_T2 = HA - HB * (POS_T1B + HALF_GAP_T1B + LEN_T1B_T2) ;
  W1_T2_MON2 = WA - WB * (POS_T2 + HALF_GAP_T2) ; 
  W2_T2_MON2 = WA - WB * (POS_T2 + HALF_GAP_T2 + LEN_T2_MON2) ;
  H1_T2_MON2 = HA - HB * (POS_T2 + HALF_GAP_T2) ; 
  H2_T2_MON2 = HA - HB * (POS_T2 + HALF_GAP_T2 + LEN_T2_MON2) ;
  W1_G4 = WA - WB * POS_G4 ; W2_G4 = WA - WB * (POS_G4 + LEN_G4) ;
  H1_G4 = HA - HB * POS_G4 ; H2_G4 = HA - HB * (POS_G4 + LEN_G4) ;
  
  LSD = 4.5 ;
  
  moddatadir = os.path.join(
      os.environ['MCVINE_DIR'], 'share', 'mcvine',
      'instruments', 'HYSPEC',
      'mcstas',
      )
  if Ortho30:
      sourcename= os.path.join(moddatadir, "SNS_TD_30o70p_fit_fit.dat")
  else:
      sourcename= os.path.join(moddatadir, "SNS_TD_0o100p_fit_fit.dat")
      pass
  # 
  
  if (toffset_us > -1.1 and toffset_us < -0.9):
      toffset_s = 0.3 * pow(( 1.0 + Edes ),(-0.9)) / 1000.0 
  else:
      toffset_s = toffset_us / 1000000.0 
      pass
  
  if (Edes < 60.0) :
      freq_T0 = 30.0; 
  else:
      freq_T0 = 60.0;
      pass
  
  # 
  # 
  nos_eng = E_max - E_min ;
  if( nos_eng < 6 ): nos_eng = 100 
  nos_eng = int(nos_eng)
  
  # 
  phase_0 = POS_T0/(sqrt(Edes)*SE2V)+toffset_s;
  
  # 
  phase_1A = POS_T1A/(sqrt(Edes)*SE2V)+toffset_s;
  t_T1A_min = POS_T1A/(sqrt(E_max)*SE2V) - 0.0020 + toffset_s;
  t_T1A_max = POS_T1A/(sqrt(E_min)*SE2V) + 0.0020 + toffset_s;
  ang_freq_1A = 2.0*PI*60.0 ;
  radius_1A = 0.250 ;
  wid_1A = 0.0946 ;
  nos_t1a = int(100000. * (t_T1A_max - t_T1A_min))
  
  # 
  phase_1B = POS_T1B/(sqrt(Edes)*SE2V)+toffset_s;
  t_T1B_min = POS_T1B/(sqrt(E_max)*SE2V) - 0.0020 + toffset_s;
  t_T1B_max = POS_T1B/(sqrt(E_min)*SE2V) + 0.0020 + toffset_s;
  ang_freq_1B = 2.0*PI*60.0 ;
  radius_1B = 0.250 ;
  wid_1B = 0.0946 ;
  nos_t1b = int(100000. * (t_T1B_max - t_T1B_min))
  
  """ The T2 FermiChopper parameters:
  dist_eff - The routine uses distance & nominal velocity to set the phase angle
  vi_eff   - and we therefore have to calculate an effective distance to account
           - for the offset time. 
  """
  len = 0.01 ;   #   
  wid = 0.0006  ; #      
  nos = 77 ;     #  
  trn = 1.0  ;    #  
  barrel = 0.12 ;       
  height = 0.155 ;
  vi_eff = sqrt(Edes) * SE2V ;
  dist_eff = POS_T2 + vi_eff * toffset_s ;
  t_T2_min = (POS_T2 + HALF_GAP_T2 - 0.0004)/(sqrt(Edes)*SE2V) - 0.000125 + toffset_s;    
  t_T2_max = (POS_T2 + HALF_GAP_T2 - 0.0004)/(sqrt(Edes)*SE2V) + 0.000125 + toffset_s;
  b_radius = barrel / 2.0 ;
  b_height_min = -height / 2.0 ;
  b_height_max =  height / 2.0 ;
  nos_t2 = int(100000. * (t_T2_max - t_T2_min))
  
  # 
  t2_min = (L1 + L2)/(sqrt(E_max)*SE2V) - 0.0020 + toffset_s;    
  t2_max = (L1 + L2)/(sqrt(E_min)*SE2V) + 0.0020 + toffset_s;    
  nos_g2 = int(100000. * (t2_max - t2_min))
  
  # 
  t_mon0_min = POS_G1A /(sqrt(E_max)*SE2V) - 0.0020 + toffset_s ;    
  t_mon0_max = POS_G1A /(sqrt(E_min)*SE2V) + 0.0020 + toffset_s ;    
  nos_mon0 = int(100000. * (t_mon0_max - t_mon0_min))
  
  # 
  t_mon1_min = POS_MON1/(sqrt(E_max)*SE2V) - 0.0020 + toffset_s;    
  t_mon1_max = POS_MON1/(sqrt(E_min)*SE2V) + 0.0020 + toffset_s;    
  nos_mon1 = int(100000. * (t_mon1_max - t_mon1_min))
  
  # 
  t_mon2_min = POS_MON2/(sqrt(Edes)*SE2V) - 0.000125 + toffset_s;    
  t_mon2_max = POS_MON2/(sqrt(Edes)*SE2V) + 0.000125 + toffset_s;    
  nos_mon2 = int(100000. * (t_mon2_max - t_mon2_min))
  
  # 
  t4_min = (POS_G4 + LEN_G4)/(sqrt(Edes)*SE2V) - 0.000125 + toffset_s;    
  t4_max = (POS_G4 + LEN_G4)/(sqrt(Edes)*SE2V) + 0.000125 + toffset_s;
  nos_g4 = int(100000. * (t4_max - t4_min))
  
  # 
  t_mon3_min =(LMM + LMS - LM3S) /(sqrt(Edes)*SE2V) - 0.000125 + toffset_s;    
  t_mon3_max =(LMM + LMS -LM3S)/(sqrt(Edes)*SE2V) + 0.000125 + toffset_s;    
  nos_mon3 = int(100000. * (t_mon3_max - t_mon3_min))
  
  # 
  phasefs_min = (LMM + LMS)/(sqrt(Edes)*SE2V) - 0.0002 + toffset_s ;
  phasefs_max = (LMM + LMS)/(sqrt(Edes)*SE2V) + 0.0002 + toffset_s ;
  nos_samp = int(100000. * (phasefs_max - phasefs_min) )
  phaseff_min = (LMM + LMS + LSD)/(sqrt(Edes)*SE2V) - 0.0002 + toffset_s ;
  phaseff_max = (LMM + LMS + LSD)/(sqrt(Edes)*SE2V) + 0.0002 + toffset_s ;
  nos_det = int(100000. * (phaseff_max - phaseff_min))
  
  # 
  
  if not Heusler:
      dPG = 3.3539 ;
      m_gap = 0.0014 ;# 
      eta_h = 72.0 ; #  
      eta_v = 72.0 ; # 
      wid_h = 0.3 ;
      wid_v = 0.012 ;
      nos_h = 1 ;
      nos_v = 13 ;
  else :
      dPG = 3.43 ;
      m_gap = 0.00125 # 
      eta_h = 48.0 * 0.45 / 0.8 ;
      eta_v = 48.0 * 0.45 / 0.8 ; 
      wid_h = 0.15 ;
      wid_v = 0.015 ;
      nos_h = 1 ;
      nos_v = 9 ;
      pass
  
  # 
  WL_mean = sqrt(81.81/Edes);
  Q_m = 2.0*PI/dPG ;
  k_m = 2.0*PI/WL_mean ;
  sin_tm = Q_m / (2.0 * k_m) ;
  Cl_ang = asin(sin_tm) * 180.0/PI ;
  Al_ang = 2.0 * Cl_ang ;
  if(iv < -0.1) :
      L1V = LMM ; L2V = LMS ;
      if(iv > -1.5 and iv < -0.5): L2V = LMS ;
      if(iv > -2.5 and iv < -1.5): L2V = LMS + LSD ;
      R_vert = 2.0 * L1V * L2V * sin_tm / (L1V + L2V) ; 
      pass
  if(iv > -0.1 and iv < 0.1): R_vert = 10000.0
  if(iv > 0.1) : R_vert = iv 
  R_horz = 10000.0 ; 
  components = [arm1, source_00, Mon0_toF, Mon0_total, G1A_guide, G1B_guide, G1C_guide, T0_T1A_guide, T1A_chopper, G2_curved_guide, G3_guide, Shutter2_guide, Shutter2_valve_guide, Valve_mon1_guide, Mon1_toF, Mon1_total, Mon1_t1b_guide, T1B_chopper, T1B_T2_guide, T2_Fermi, T2_MON2_guide, Mon2_toF, Mon2_total, G4_guide, arm2, monochromator, Exit_tube, Mon3_ToF, Mon3_total, Aperture1, Soeller20, Aperture2, sample_10x10, sample_1x1, recorder()]
  from mcvine.instrument.pml import set_instrument_parameters, PmlRenderer
  class instrument: pass
  instrument.name='hyspec_moderator2sample'
  instrument.components=components
  set_instrument_parameters(instrument, locals())
  from mcvine.instrument.pml import PmlRenderer
  renderer = PmlRenderer()
  text = '\n'.join(renderer.render(instrument))
  pml = 'hyspec_moderator2sample.pml'
  open(pml, 'wt').write(text)
  return

from pyre.applications.Script import Script as base
class App(base):
  class Inventory(base.Inventory):
    import pyre.inventory
    Edes = pyre.inventory.float("Edes", default="20.")
    E_min = pyre.inventory.float("E_min", default="10.")
    E_max = pyre.inventory.float("E_max", default="30.")
    Ortho30 = pyre.inventory.bool("Ortho30", default="False")
    toffset_us = pyre.inventory.float("toffset_us", default="-1.0")
    freq = pyre.inventory.float("freq", default="180")
    LMS = pyre.inventory.float("LMS", default="1.8")
    iv = pyre.inventory.float("iv", default="-1.0")
    Heusler = pyre.inventory.bool("Heusler", default="False")
    LM3S = pyre.inventory.float("LM3S", default="0.72")
    pass # Inventory
  def main(self, *args, **kwds):
    d={}
    d["Edes"] = self.inventory.Edes
    d["E_min"] = self.inventory.E_min
    d["E_max"] = self.inventory.E_max
    d["Ortho30"] = self.inventory.Ortho30
    d["toffset_us"] = self.inventory.toffset_us
    d["freq"] = self.inventory.freq
    d["LMS"] = self.inventory.LMS
    d["iv"] = self.inventory.iv
    d["Heusler"] = self.inventory.Heusler
    d["LM3S"] = self.inventory.LM3S
    config(**d)
    return
  def help(self):
    import sys, os
    h = os.path.basename(sys.argv[0]) + "  "
    print h,
    print "--Edes=20. --E_min=10. --E_max=30. --Ortho30=False --toffset_us=-1.0 --freq=180 --LMS=1.8 --iv=-1.0 --Heusler=False --LM3S=0.72"
def main():
  App("config-hyspec_moderator2sample").run()
if __name__=='__main__': main()