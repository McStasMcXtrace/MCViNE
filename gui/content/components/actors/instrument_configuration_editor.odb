#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import luban.content as lc

from luban.content import load, select, alert


from luban.components.Actor import Actor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')
        short_description = pyre.inventory.str('short_description')
        instrument_configuration = pyre.inventory.str('instrument_configuration')
        mode = pyre.inventory.str('mode')
        component = pyre.inventory.str('component')
        before = pyre.inventory.str('before')
        newtype = pyre.inventory.str('newtype')



    editorvisualname = 'instrument_configuration_editor'
    editorvisualid = 'instrument-configuration-editor'
    

    def createEditor(self, director):
        return director.retrieveVisual(
            '???',
            id = self.inventory.id,
            director = director,
            )


    def onInsertComponent(self, director):
        """
        id: id of instrument configuration
        before: unique identifier of the component before which the new component will be inserted
        """
        #
        clerk = director.clerk
        orm = clerk.orm
        db = orm.db
        
        # instrument configuration
        id = self.inventory.id
        ic = self._getICRecord(id=id, director=director)

        # before
        before = self.inventory.before
        before = db.fetchRecordUsingUniqueIdentifierStr(before)

        # insert a new component
        newcomponent = self._createNewArmComponentInDB(director)
        ic.components.insert(newcomponent, before=before, db=db)

        # actions
        newview = director.retrieveVisual(
            self.editorvisualname,
            actorname = self.name,
            icid = self.inventory.id, 
            director=director, 
            componenttoedit=orm.record2object(newcomponent),
            )
        
        return select(id=self.editorvisualid).replaceBy(newview)


    def onAppendComponent(self, director):
        '''
        id: id of instrument configuration
        '''
        
        db = director.clerk.db
        orm = director.clerk.orm

        # instrument configuration
        id = self.inventory.id
        ic = self._getICRecord(id, director)

        # append a new component
        newcomponent = self._createNewArmComponentInDB(director)
        ic.components.add(newcomponent, db=db)

        # actions
        newview = director.retrieveVisual(
            self.editorvisualname,
            actorname = self.name,
            icid = self.inventory.id, 
            director=director, 
            componenttoedit=orm.record2object(newcomponent),
            )
        #
        return select(id=self.editorvisualid).replaceBy(newview)


    def onChangeComponentType(self, director):
        """
        id: id of instrument configuration
        component: unique identifier of the component before which the new component will be inserted
        newtype: new component type
        """
        orm = director.clerk.orm
        db = orm.db 
        
        # instrument configuration
        ic = self._getICRecord(self.inventory.id, director)

        # component
        component = self.inventory.component
        component = db.fetchRecordUsingUniqueIdentifierStr(component)

        # create a new component
        newtype = self.inventory.newtype
        
        newcomponent = self._createNewComponentWithName(
            newtype, componentname=component.componentname, director=director)
        
        # replace the old component with the newcomponent
        index = ic.components.getIndex(component, db=db)
        ic.components.setElement(index=index, element=newcomponent, db=db)

        # destroy the old component
        orm.destroy(orm.record2object(component))

        # actions
        newview = director.retrieveVisual(
            self.editorvisualname,
            actorname = self.name,
            icid = self.inventory.id, 
            director=director, 
            componenttoedit=orm.record2object(newcomponent),
            )
        return select(id=self.editorvisualid).replaceBy(newview)


    def onDeleteComponent(self, director):
        """
        id: id of experiment
        component: unique identifier of the component before which the new component will be inserted
        """
        clerk = director.clerk
        orm = clerk.orm
        db = orm.db

        # component
        component = self.inventory.component
        component = db.fetchRecordUsingUniqueIdentifierStr(component)

        # instrument configuration
        ic = self._getICRecord(self.inventory.id, director)

        # if there is only one component left, alert user
        components = ic.components.dereference(db)
        if len(components) == 1:
            return alert('There is only one component left.')
        if len(components) == 0:
            raise RuntimeError

        # delete component from the refset
        ic.components.delete(component, db)
        # destroy it
        orm.destroy(orm.record2object(component))
        
        # actions
        newview = director.retrieveVisual(
            self.editorvisualname,
            actorname = self.name,
            icid = self.inventory.id, 
            director=director,
            )
        return select(id=self.editorvisualid).replaceBy(newview)


    def _createNewComponentWithName(self, typename, componentname=None, director=None):
        db = director.clerk.db
        
        # 
        table = db.getTable(typename)
        
        # create new db record
        r = self._createNewComponentInDB(table, director)
        
        # assign name if requested
        if componentname:
            r.componentname = componentname
            db.updateRecord(r)
            
        return r

    
    def _createNewArmComponentInDB(self, director):
        # insert a new arm component to db
        from mcvineui.dom.neutron_components.Arm import Arm
        orm = director.clerk.orm
        ArmTable = orm(Arm)
        return self._createNewComponentInDB(ArmTable, director)


    def _createNewComponentInDB(self, table, director):
        db = director.clerk.db
        # insert a new component
        from mcvineui.dom import insertRecordWithID
        newcomponent = insertRecordWithID(table, director.getGUID(), db)
        return newcomponent


    def _getICRecord(self, id, director):
        from mcvineui.dom.InstrumentConfiguration import InstrumentConfigurationTable
        from mcvineui.dom.InstrumentConfiguration import InstrumentConfiguration
        orm = director.clerk.orm
        return orm(orm.load(InstrumentConfiguration, id))
        return director.clerk.orm.db.query(InstrumentConfigurationTable).filter_by(id=id)


    def __init__(self, name='instrument_configuration_editor'):
        super(Actor, self).__init__(name)
        return


    # db access



def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

